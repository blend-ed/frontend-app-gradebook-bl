{"version":3,"file":"app.a5e734b12631d4f4db55.js","mappings":"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","sources":["webpack://@edx/frontend-app-gradebook/./src/lightning.js","webpack://@edx/frontend-app-gradebook/./src/i18n/index.js","webpack://@edx/frontend-app-gradebook/./src/utils/StrictDict.js","webpack://@edx/frontend-app-gradebook/./src/utils/formatDate.js","webpack://@edx/frontend-app-gradebook/./src/data/constants/app.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/utils.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/app.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/assignmentTypes.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/cohorts.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/config.js","webpack://@edx/frontend-app-gradebook/./src/data/constants/filters.messages.js","webpack://@edx/frontend-app-gradebook/./src/data/constants/filters.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/filters.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/grades.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/roles.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/tracks.js","webpack://@edx/frontend-app-gradebook/./src/data/actions/index.js","webpack://@edx/frontend-app-gradebook/./src/data/services/lms/constants.js","webpack://@edx/frontend-app-gradebook/./src/data/services/lms/utils.js","webpack://@edx/frontend-app-gradebook/./src/data/services/lms/urls.js","webpack://@edx/frontend-app-gradebook/./src/data/services/lms/messages.js","webpack://@edx/frontend-app-gradebook/./src/data/services/lms/api.js","webpack://@edx/frontend-app-gradebook/./src/data/services/lms/index.js","webpack://@edx/frontend-app-gradebook/./src/data/utils.js","webpack://@edx/frontend-app-gradebook/./src/data/constants/grades.js","webpack://@edx/frontend-app-gradebook/./src/i18n/utils.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/grades.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/app.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/assignmentTypes.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/cohorts.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/filters.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/roles.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/tracks.js","webpack://@edx/frontend-app-gradebook/./src/data/selectors/index.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/app.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/assignmentTypes.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/cohorts.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/config.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/filters.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/grades.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/roles.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/tracks.js","webpack://@edx/frontend-app-gradebook/./src/data/reducers/index.js","webpack://@edx/frontend-app-gradebook/./src/data/services/segment/constants.js","webpack://@edx/frontend-app-gradebook/./src/data/services/segment/utils.js","webpack://@edx/frontend-app-gradebook/./src/data/services/segment/mapping.js","webpack://@edx/frontend-app-gradebook/./src/data/store.js","webpack://@edx/frontend-app-gradebook/./src/data/thunkActions/grades.js","webpack://@edx/frontend-app-gradebook/./src/data/constants/errors.js","webpack://@edx/frontend-app-gradebook/./src/data/thunkActions/cohorts.js","webpack://@edx/frontend-app-gradebook/./src/data/thunkActions/tracks.js","webpack://@edx/frontend-app-gradebook/./src/data/thunkActions/assignmentTypes.js","webpack://@edx/frontend-app-gradebook/./src/data/thunkActions/roles.js","webpack://@edx/frontend-app-gradebook/./src/data/thunkActions/app.js","webpack://@edx/frontend-app-gradebook/./src/data/thunkActions/index.js","webpack://@edx/frontend-app-gradebook/./src/components/WithSidebar/index.jsx","webpack://@edx/frontend-app-gradebook/./src/data/redux/hooks/selectors.js","webpack://@edx/frontend-app-gradebook/./src/data/redux/hooks/utils.js","webpack://@edx/frontend-app-gradebook/./src/data/redux/hooks/actions.js","webpack://@edx/frontend-app-gradebook/./src/data/redux/hooks/thunkActions.js","webpack://@edx/frontend-app-gradebook/./src/data/redux/hooks/index.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookHeader/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookHeader/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookHeader/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/NetworkButton/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ImportGradesButton/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ImportGradesButton/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ImportGradesButton/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/BulkManagementControls/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/BulkManagementControls/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/BulkManagementControls/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/OverrideTable/ReasonInput/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/OverrideTable/ReasonInput/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/OverrideTable/AdjustedGradeInput/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/OverrideTable/AdjustedGradeInput/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/OverrideTable/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/OverrideTable/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/OverrideTable/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/HistoryHeader.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/ModalHeaders.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/EditModal/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/FilterBadges/FilterBadge.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/FilterBadges/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/FilteredUsersLabel/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/FilteredUsersLabel/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/FilterMenuToggle/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/FilterMenuToggle/index.jsx","webpack://@edx/frontend-app-gradebook/./src/data/redux/transforms.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/GradebookTable/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/GradebookTable/Fields.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/GradebookTable/LabelReplacements.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/GradebookTable/GradeButton.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/GradebookTable/hooks.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/GradebookTable/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ImportSuccessToast/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ImportSuccessToast/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ImportSuccessToast/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/InterventionsReport/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/InterventionsReport/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/InterventionsReport/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/PageButtons/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/PageButtons/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/PageButtons/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ScoreViewInput/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/ScoreViewInput/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/SearchControls/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/SearchControls/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/SearchControls/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/SpinnerIcon.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/StatusAlerts/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/StatusAlerts/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/StatusAlerts/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradesView/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/SelectGroup.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/AssignmentTypeFilter/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/AssignmentTypeFilter/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/AssignmentFilter/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/AssignmentFilter/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/PercentGroup.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/AssignmentGradeFilter/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/AssignmentGradeFilter/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/CourseGradeFilter/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/CourseGradeFilter/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/StudentGroupsFilter/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/StudentGroupsFilter/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/index.jsx","webpack://@edx/frontend-app-gradebook/./src/components/GradebookFilters/hooks.js","webpack://@edx/frontend-app-gradebook/./src/components/BulkManagementHistoryView/messages.js","webpack://@edx/frontend-app-gradebook/./src/components/BulkManagementHistoryView/BulkManagementAlerts.jsx","webpack://@edx/frontend-app-gradebook/./src/components/BulkManagementHistoryView/ResultsSummary.jsx","webpack://@edx/frontend-app-gradebook/./src/components/BulkManagementHistoryView/HistoryTable.jsx","webpack://@edx/frontend-app-gradebook/./src/components/BulkManagementHistoryView/index.jsx","webpack://@edx/frontend-app-gradebook/./src/containers/GradebookPage/index.jsx","webpack://@edx/frontend-app-gradebook/./src/head/messages.js","webpack://@edx/frontend-app-gradebook/./src/head/Head.jsx","webpack://@edx/frontend-app-gradebook/./src/App.jsx","webpack://@edx/frontend-app-gradebook/./src/index.jsx"],"sourcesContent":["module.exports = () => {\n  if (process.env.DISPLAY_FEEDBACK_WIDGET === \"true\") {\n    window.lightningjs ||\n      (function (n) {\n        var e = \"lightningjs\";\n        function t(e, t) {\n          var r, i, a, o, d, c;\n          return (\n            t && (t += (/\\?/.test(t) ? \"&\" : \"?\") + \"lv=1\"),\n            n[e] ||\n              ((r = window),\n              (i = document),\n              (a = e),\n              (o = i.location.protocol),\n              (d = \"load\"),\n              (c = 0),\n              (function () {\n                n[a] = function () {\n                  var t = arguments,\n                    i = this,\n                    o = ++c,\n                    d = (i && i != r && i.id) || 0;\n                  function s() {\n                    return (s.id = o), n[a].apply(s, arguments);\n                  }\n                  return (\n                    (e.s = e.s || []).push([o, d, t]),\n                    (s.then = function (n, t, r) {\n                      var i = (e.fh[o] = e.fh[o] || []),\n                        a = (e.eh[o] = e.eh[o] || []),\n                        d = (e.ph[o] = e.ph[o] || []);\n                      return n && i.push(n), t && a.push(t), r && d.push(r), s;\n                    }),\n                    s\n                  );\n                };\n                var e = (n[a]._ = {});\n                function s() {\n                  e.P(d), (e.w = 1), n[a](\"_load\");\n                }\n                (e.fh = {}),\n                  (e.eh = {}),\n                  (e.ph = {}),\n                  (e.l = t\n                    ? t.replace(/^\\/\\//, (\"https:\" == o ? o : \"http:\") + \"//\")\n                    : t),\n                  (e.p = { 0: +new Date() }),\n                  (e.P = function (n) {\n                    e.p[n] = new Date() - e.p[0];\n                  }),\n                  e.w && s(),\n                  r.addEventListener\n                    ? r.addEventListener(d, s, !1)\n                    : r.attachEvent(\"onload\", s);\n                var l = function () {\n                  function n() {\n                    return [\n                      \"<!DOCTYPE \",\n                      o,\n                      \"><\",\n                      o,\n                      \"><head></head><\",\n                      t,\n                      \"><\",\n                      r,\n                      ' src=\"',\n                      e.l,\n                      '\"></',\n                      r,\n                      \"></\",\n                      t,\n                      \"></\",\n                      o,\n                      \">\",\n                    ].join(\"\");\n                  }\n                  var t = \"body\",\n                    r = \"script\",\n                    o = \"html\",\n                    d = i[t];\n                  if (!d) return setTimeout(l, 100);\n                  e.P(1);\n                  var c,\n                    s = i.createElement(\"div\"),\n                    h = s.appendChild(i.createElement(\"div\")),\n                    u = i.createElement(\"iframe\");\n                  (s.style.display = \"none\"),\n                    (d.insertBefore(s, d.firstChild).id = \"lightningjs-\" + a),\n                    (u.frameBorder = \"0\"),\n                    (u.id = \"lightningjs-frame-\" + a),\n                    /MSIE[ ]+6/.test(navigator.userAgent) &&\n                      (u.src = \"javascript:false\"),\n                    (u.allowTransparency = \"true\"),\n                    h.appendChild(u);\n                  try {\n                    u.contentWindow.document.open();\n                  } catch (n) {\n                    (e.domain = i.domain),\n                      (c =\n                        \"javascript:var d=document.open();d.domain='\" +\n                        i.domain +\n                        \"';\"),\n                      (u.src = c + \"void(0);\");\n                  }\n                  try {\n                    var p = u.contentWindow.document;\n                    p.write(n()), p.close();\n                  } catch (e) {\n                    u.src =\n                      c +\n                      'd.write(\"' +\n                      n().replace(/\"/g, String.fromCharCode(92) + '\"') +\n                      '\");d.close();';\n                  }\n                  e.P(2);\n                };\n                e.l && l();\n              })()),\n            (n[e].lv = \"1\"),\n            n[e]\n          );\n        }\n        var r = (window.lightningjs = t(e));\n        (r.require = t), (r.modules = n);\n      })({});\n    window.usabilla_live = lightningjs.require(\n      \"usabilla_live\",\n      \"//w.usabilla.com/a13a22d8ea20.js\"\n    );\n  }\n};\n","import { messages as footerMessages } from '@edx/frontend-component-footer';\nimport { messages as headerMessages } from '@edx/frontend-component-header';\nimport { messages as paragonMessages } from '@edx/paragon';\n\nimport arMessages from './messages/ar.json';\nimport deMessages from './messages/de.json';\nimport es419Messages from './messages/es_419.json';\nimport faIRMessages from './messages/fa_IR.json';\nimport frMessages from './messages/fr.json';\nimport frCAMessages from './messages/fr_CA.json';\nimport hiMessages from './messages/hi.json';\nimport itMessages from './messages/it.json';\nimport ptMessages from './messages/pt.json';\nimport ruMessages from './messages/ru.json';\nimport ukMessages from './messages/uk.json';\nimport zhcnMessages from './messages/zh_CN.json';\n// no need to import en messages-- they are in the defaultMessage field\n\nconst appMessages = {\n  ar: arMessages,\n  'es-419': es419Messages,\n  'fa-ir': faIRMessages,\n  fr: frMessages,\n  'zh-cn': zhcnMessages,\n  pt: ptMessages,\n  it: itMessages,\n  de: deMessages,\n  hi: hiMessages,\n  'fr-ca': frCAMessages,\n  ru: ruMessages,\n  uk: ukMessages,\n};\n\nexport default [\n  paragonMessages,\n  footerMessages,\n  headerMessages,\n  appMessages,\n];\n","/* eslint-disable no-console */\nconst strictGet = (target, name) => {\n  if (name === Symbol.toStringTag) {\n    return target;\n  }\n\n  if (name === '$$typeof') {\n    return typeof target;\n  }\n\n  if (name in target || name === '_reactFragment') {\n    return target[name];\n  }\n\n  console.log(name.toString());\n  console.error({ target, name });\n  const e = Error(`invalid property \"${name.toString()}\"`);\n  console.error(e.stack);\n  return undefined;\n};\n\nconst StrictDict = (dict) => new Proxy(dict, { get: strictGet });\n\nexport default StrictDict;\n","export const options = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  timeZone: 'UTC',\n};\nexport const timeOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  timeZone: 'UTC',\n  timeZoneName: 'short',\n};\n\nconst formatDateForDisplay = (inputDate) => {\n  const date = inputDate.toLocaleDateString('en-US', options);\n  const time = inputDate.toLocaleTimeString('en-US', timeOptions);\n  return `${date} at ${time}`;\n};\n\nexport default formatDateForDisplay;\n","import { StrictDict } from 'utils';\nimport { getConfig } from '@edx/frontend-platform';\n\nexport const routePath = `${getConfig().PUBLIC_PATH}:courseId`;\n\nexport const views = StrictDict({\n  grades: 'grades',\n  bulkManagementHistory: 'bulkManagementHistory',\n});\n\nexport const modalFieldKeys = StrictDict({\n  adjustedGradePossible: 'adjustedGradePossible',\n  adjustedGradeValue: 'adjustedGradeValue',\n  assignmentName: 'assignmentName',\n  reasonForChange: 'reasonForChange',\n  todaysDate: 'todaysDate',\n  updateModuleId: 'updateModuleId',\n  updateUserId: 'updateUserId',\n  updateUserName: 'updateUserName',\n  open: 'open',\n});\n\nexport const localFilterKeys = StrictDict({\n  assignmentGradeMax: 'assignmentGradeMax',\n  assignmentGradeMin: 'assignmentGradeMin',\n  courseGradeMax: 'courseGradeMax',\n  courseGradeMin: 'courseGradeMin',\n});\n\n/**\n * column configuration for bulk management tab's data table\n */\nexport const bulkManagementColumns = [\n  {\n    accessor: 'filename',\n    Header: 'Gradebook',\n    columnSortable: false,\n    width: 'col-5',\n  },\n  {\n    accessor: 'resultsSummary',\n    Header: 'Download Summary',\n    columnSortable: false,\n    width: 'col',\n  },\n  {\n    accessor: 'user',\n    Header: 'Who',\n    columnSortable: false,\n    width: 'col-1',\n  },\n  {\n    accessor: 'timeUploaded',\n    Header: 'When',\n    columnSortable: false,\n    width: 'col',\n  },\n];\n\nexport const gradeOverrideHistoryColumns = StrictDict({\n  adjustedGrade: 'adjustedGrade',\n  date: 'date',\n  grader: 'grader',\n  reason: 'reason',\n});\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const options = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  timeZone: 'UTC',\n};\nexport const timeOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  timeZone: 'UTC',\n  timeZoneName: 'short',\n};\n\nconst formatDateForDisplay = (inputDate) => {\n  const date = inputDate.toLocaleDateString('en-US', options);\n  const time = inputDate.toLocaleTimeString('en-US', timeOptions);\n  return `${date} at ${time}`;\n};\n\nconst sortAlphaAsc = (gradeRowA, gradeRowB) => {\n  const a = gradeRowA.username.toUpperCase();\n  const b = gradeRowB.username.toUpperCase();\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst createActionFactory = (dataKey) => (actionKey, ...args) => (\n  createAction(`${dataKey}/${actionKey}`, ...args)\n);\n\nexport {\n  createActionFactory,\n  sortAlphaAsc,\n  formatDateForDisplay,\n};\n","import { StrictDict } from 'utils';\nimport { modalFieldKeys, localFilterKeys } from 'data/constants/app';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'app';\nconst createAction = createActionFactory(dataKey);\n\nconst closeModal = createAction('closeModal');\n/**\n * setCourseId(courseId)\n * loads courseID into local app state\n * @param {string} courseId - course ID from app context\n */\nconst setCourseId = createAction('setCourseId');\n\nconst filterMenu = StrictDict({\n  endTransition: createAction('filterMenu/endTransition'),\n  startTransition: createAction('filterMenu/startTransition'),\n  toggle: createAction('filterMenu/toggle'),\n});\n\n/**\n  * setModalStateFromTable({ userEntry, subsection })\n  * sets modalState\n  */\nconst setModalStateFromTable = createAction('setModalStateFromTable');\n\n/**\n * setSearchValue(searchValue)\n * sets searchValue in local state\n * @param {string} searchValue - search input text\n */\nconst setSearchValue = createAction('setSearchValue');\n\nconst filterReducer = (payload) => (obj, key) => (\n  (payload[key] !== undefined) ? { ...obj, [key]: payload[key] } : obj\n);\n\n/**\n * setLocalFilter(filterObject)\n * sets a number of localFilterKey fields on localFilters\n * @param {object} filterObject - an object of filter values\n */\nconst setLocalFilter = createAction('setLocalFilter', (filterObject) => ({\n  payload: Object.keys(localFilterKeys).reduce(filterReducer(filterObject), {}),\n}));\n\n/**\n * setModalState(modalState)\n * sets a number of modalFieldKey fields on modalState\n * @param {object} modalState - an object of modal state values\n */\nconst setModalState = createAction('setModalState', (modalState) => ({\n  payload: Object.keys(modalFieldKeys).reduce(filterReducer(modalState), {}),\n}));\n\n/**\n * setShowImportSuccessToast(shouldShow)\n * Set whether or not to show the Import Grades success toast\n * @param {bool} sholdShow - should show the toast?\n */\nconst setShowImportSuccessToast = createAction('setShowImportSuccessToast');\n\n/**\n * setView(viewId)\n * sets the UI to display the tab indcated by the passed view id\n * @param {string} viewId - view id as set in app constants\n */\nconst setView = createAction('setView');\n\nexport default StrictDict({\n  closeModal,\n  filterMenu,\n  setCourseId,\n  setLocalFilter,\n  setModalState,\n  setModalStateFromTable,\n  setSearchValue,\n  setShowImportSuccessToast,\n  setView,\n});\n","import { StrictDict } from 'utils';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'assignmentTypes';\nconst createAction = createActionFactory(dataKey);\n\nconst fetching = {\n  error: createAction('fetching/error'),\n  started: createAction('fetching/started'),\n  /**\n   * fetching.received(results)\n   * @param {object[]} results - assignmentType fetch results\n   */\n  received: createAction('fetching/received'),\n};\n/**\n * gotGradesFrozen(areGradesFrozen)\n * @param {bool} are grades frozen?\n */\nconst gotGradesFrozen = createAction('gotGradesFrozen');\n\nexport default StrictDict({\n  fetching: StrictDict(fetching),\n  gotGradesFrozen,\n});\n","import { StrictDict } from 'utils';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'cohorts';\nconst createAction = createActionFactory(dataKey);\n\nconst fetching = {\n  started: createAction('fetching/started'),\n  error: createAction('fetching/error'),\n  /**\n   * fetching.received(results)\n   * @param {object[]} results - cohorts fetch results\n   */\n  received: createAction('fetching/received'),\n};\n\nexport default StrictDict({\n  fetching: StrictDict(fetching),\n});\n","import { StrictDict } from 'utils';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'config';\nconst createAction = createActionFactory(dataKey);\n\n/**\n * gotBulkManagemmentConfig(bulkManagementAvailable)\n * @param {bool} bulkManagementAvailable - is bulk management available?\n */\nconst gotBulkManagementConfig = createAction('gotBulkManagement');\n\nexport default StrictDict({\n  gotBulkManagementConfig,\n});\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  assignment: {\n    id: 'gradebook.GradesTab.FilterBadges.assignment',\n    defaultMessage: 'Assignment',\n    description: 'A label describing the notification under the \"Edit Filters\" button that shows by which of the course\\'s assignments the view is being filtered.',\n  },\n  assignmentGrade: {\n    id: 'gradebook.GradesTab.FilterBadges.assignmentGrade',\n    defaultMessage: 'Assignment Grade',\n    description: 'A label describing the notification under the \"Edit Filters\" button that shows that the view is being filtered to include assignment grades within the alloted range.',\n  },\n  assignmentType: {\n    id: 'gradebook.GradesTab.FilterBadges.assignmentType',\n    defaultMessage: 'Assignment Type',\n    description: 'A label describing the notification under the \"Edit Filters\" button that shows by which of the course\\'s assignment types the view is being filtered.',\n  },\n  cohort: {\n    id: 'gradebook.GradesTab.FilterBadges.cohort',\n    defaultMessage: 'Cohort',\n    description: 'A label describing the notification under the \"Edit Filters\" button that shows by which of the course\\'s cohorts the view is being filtered.',\n  },\n  courseGrade: {\n    id: 'gradebook.GradesTab.FilterBadges.courseGrade',\n    defaultMessage: 'Course Grade',\n    description: 'A label describing the notification under the \"Edit Filters\" button that shows that the view is being filtered to include course grades within the alloted range.',\n  },\n  includeCourseRoleMembers: {\n    id: 'gradebook.GradesTab.FilterBadges.includeCourseRoleMembers',\n    defaultMessage: 'Include Course Team Members',\n    description: 'A label describing the notification under the \"Edit Filters\" button that shows that the view is being filtered to include course team members.',\n  },\n  track: {\n    id: 'gradebook.GradesTab.FilterBadges.track',\n    defaultMessage: 'Track',\n    description: 'A label describing the notification under the \"Edit Filters\" button that shows by which of the course\\'s tracks the view is being filtered.',\n  },\n});\n\nexport default messages;\n","import { StrictDict } from 'utils';\n\nimport messages from './filters.messages';\n\nexport const filters = StrictDict({\n  assignment: 'assignment',\n  assignmentGrade: 'assignmentGrade',\n  assignmentGradeMax: 'assignmentGradeMax',\n  assignmentGradeMin: 'assignmentGradeMin',\n  assignmentType: 'assignmentType',\n  cohort: 'cohort',\n  courseGrade: 'courseGrade',\n  courseGradeMax: 'courseGradeMax',\n  courseGradeMin: 'courseGradeMin',\n  excludedCourseRoles: 'excludedCourseRoles',\n  includeCourseRoleMembers: 'includeCourseRoleMembers',\n  track: 'track',\n});\n\nconst initialFilters = {\n  [filters.assignment]: '',\n  [filters.assignmentGradeMax]: '100',\n  [filters.assignmentGradeMin]: '0',\n  [filters.assignmentType]: '',\n  [filters.cohort]: '',\n  [filters.courseGradeMax]: '100',\n  [filters.courseGradeMin]: '0',\n  [filters.includeCourseRoleMembers]: false,\n  [filters.track]: '',\n};\n\nexport const filterConfig = StrictDict({\n  [filters.assignment]: {\n    displayName: messages[filters.assignment],\n    connectedFilters: ['assignment', 'assignmentGradeMax', 'assignmentGradeMax'],\n  },\n  [filters.assignmentType]: {\n    displayName: messages[filters.assignmentType],\n    connectedFilters: ['assignmentType'],\n  },\n  [filters.assignmentGrade]: {\n    displayName: messages[filters.assignmentGrade],\n    filterOrder: ['assignmentGradeMin', 'assignmentGradeMax'],\n    connectedFilters: ['assignmentGradeMax', 'assignmentGradeMin'],\n  },\n  [filters.cohort]: {\n    displayName: messages[filters.cohort],\n    connectedFilters: ['cohort'],\n  },\n  [filters.courseGrade]: {\n    displayName: messages[filters.courseGrade],\n    filterOrder: ['courseGradeMin', 'courseGradeMax'],\n    connectedFilters: ['courseGradeMax', 'courseGradeMin'],\n  },\n  [filters.includeCourseRoleMembers]: {\n    displayName: messages[filters.includeCourseRoleMembers],\n    connectedFilters: ['includeCourseRoleMembers'],\n    hideValue: true,\n  },\n  [filters.track]: {\n    displayName: messages[filters.track],\n    connectedFilters: ['track'],\n  },\n});\n\nexport const badgeOrder = [\n  filters.assignmentType,\n  filters.assignment,\n  filters.assignmentGrade,\n  filters.courseGrade,\n  filters.track,\n  filters.cohort,\n  filters.includeCourseRoleMembers,\n];\n\nexport default initialFilters;\n","import { StrictDict } from 'utils';\nimport initialFilters from '../constants/filters';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'filters';\nconst createAction = createActionFactory(dataKey);\n\n/**\n * initialize(filterValues)\n * @param {object} - object of filter values. Omitted filters are initialized to default value.\n */\nconst initialize = createAction('initialize', ({\n  assignment = initialFilters.assignment,\n  assignmentType = initialFilters.assignmentType,\n  track = initialFilters.track,\n  cohort = initialFilters.cohort,\n  assignmentGradeMin = initialFilters.assignmentGradeMin,\n  assignmentGradeMax = initialFilters.assignmentGradeMax,\n  courseGradeMin = initialFilters.courseGradeMin,\n  courseGradeMax = initialFilters.assignmentGradeMax,\n  includeCourseRoleMembers = initialFilters.includeCourseRoleMembers,\n}) => ({\n  payload: {\n    assignment: { id: assignment },\n    assignmentType,\n    track,\n    cohort,\n    assignmentGradeMin,\n    assignmentGradeMax,\n    courseGradeMin,\n    courseGradeMax,\n    includeCourseRoleMembers: Boolean(includeCourseRoleMembers),\n  },\n}));\n\n/**\n * reset(filterNames)\n * resets a list of filters to initial value\n * @param {stringp[]} - list of filters to reset\n */\nconst reset = createAction('reset');\nconst update = StrictDict({\n  /**\n   * update.assignment(assignment)\n   * @param {object} assignment - new assignment filter object ({ id, ... })\n   */\n  assignment: createAction('update/assignment'),\n  /**\n   * update.assignmentType(assignmentType)\n   * @param {string} assignmentType - new assignmentType filter\n   */\n  assignmentType: createAction('update/assignmentType'),\n  /**\n   * update.assignmentLimits(limits)\n   * @param {object} limits - object of assignmentLimits\n   *   ({ assigmnentGradeMax, assignmentGradeMin })\n   */\n  assignmentLimits: createAction('update/assignmentLimits'),\n  /**\n   * update.courseGradeLimits(limits)\n   * @param {object} limits - object of courseLimits\n   *   ({ courseGradeMax, courseGradeMin })\n   */\n  courseGradeLimits: createAction('update/courseGradeLimits'),\n  /**\n   * update.includeCourseRoleMembers(includeCourseRoleMembers)\n   * @param {bool} includeCourseRoleMembers - include staff in grades table?\n   */\n  includeCourseRoleMembers: createAction('update/includeCourseRoleMembers'),\n  /**\n   * update.cohort(cohortId)\n   * @param {number} cohortId - new cohort filter id\n   */\n  cohort: createAction('update/cohort'),\n  /**\n   * update.track(trackSlug)\n   * @param {string} trackSlug - new track filter slug\n   */\n  track: createAction('update/track'),\n});\n\nexport default StrictDict({\n  initialize,\n  reset,\n  update: StrictDict(update),\n});\n","import { StrictDict } from 'utils';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'grades';\nconst createAction = createActionFactory(dataKey);\n\nconst banner = {\n  open: createAction('banner/open'),\n  close: createAction('banner/close'),\n};\n\nconst bulkHistory = {\n  /**\n   * bulkHistory.received(history)\n   * @param {object[]} history - bulkHistory fetch results\n   */\n  received: createAction('bulkHistory/received'),\n  // this doesn't seem to be consumed anywhere at the moment\n  error: createAction('bulkHistory/error'),\n};\n\nconst csvUpload = {\n  started: createAction('csvUpload/started'),\n  finished: createAction('csvUpload/finished'),\n  error: createAction('csvUpload/error'),\n};\n\nconst doneViewingAssignment = createAction('doneViewingAssignment');\n\n// for segment tracking\nconst downloadReport = {\n  bulkGrades: createAction('downloadReport/bulkGrades'),\n  intervention: createAction('downloadReport/intervention'),\n};\n\nconst fetching = {\n  started: createAction('fetching/started'),\n  finished: createAction('fetching/finished'),\n  error: createAction('fetching/error'),\n  // for segment tracking\n  received: createAction(\n    'fetching/received',\n    (data) => ({\n      payload: {\n        grades: data.grades,\n        cohort: data.cohort,\n        track: data.track,\n        assignmentType: data.assignmentType,\n        headings: data.headings,\n        prev: data.prev,\n        next: data.next,\n        courseId: data.courseId,\n        totalUsersCount: data.totalUsersCount,\n        filteredUsersCount: data.filteredUsersCount,\n      },\n    }),\n  ),\n};\n\nconst overrideHistory = {\n  error: createAction('overrideHistory/errorFetching'),\n  received: createAction(\n    'overrideHistory/received',\n    (data) => ({\n      payload: {\n        overrideHistory: data.overrideHistory,\n        currentEarnedAllOverride: data.currentEarnedAllOverride,\n        currentPossibleAllOverride: data.currentPossibleAllOverride,\n        currentEarnedGradedOverride: data.currentEarnedGradedOverride,\n        currentPossibleGradedOverride: data.currentPossibleGradedOverride,\n        originalGradeEarnedAll: data.originalGradeEarnedAll,\n        originalGradePossibleAll: data.originalGradePossibleAll,\n        originalGradeEarnedGraded: data.originalGradeEarnedGraded,\n        originalGradePossibleGraded: data.originalGradePossibleGraded,\n      },\n    }),\n  ),\n};\n\nconst toggleGradeFormat = createAction('toggleGradeFormat');\n\nconst update = {\n  request: createAction('update/request'),\n  success: createAction('update/success'),\n  failure: createAction('update/failure', (courseId, error) => ({\n    payload: { courseId, error },\n  })),\n};\n\nconst uploadOverride = {\n  success: createAction('uploadOverride/success'),\n  failure: createAction('uploadOverride/failure'),\n};\n\nexport default StrictDict({\n  banner: StrictDict(banner),\n  bulkHistory: StrictDict(bulkHistory),\n  csvUpload: StrictDict(csvUpload),\n  doneViewingAssignment,\n  downloadReport: StrictDict(downloadReport),\n  fetching: StrictDict(fetching),\n  overrideHistory: StrictDict(overrideHistory),\n  toggleGradeFormat,\n  update: StrictDict(update),\n  uploadOverride: StrictDict(uploadOverride),\n});\n","import { StrictDict } from 'utils';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'roles';\nconst createAction = createActionFactory(dataKey);\n\nconst fetching = {\n  error: createAction('fetching/error'),\n  received: createAction('fetching/received'),\n};\n\nexport default StrictDict({\n  fetching: StrictDict(fetching),\n});\n","import { StrictDict } from 'utils';\nimport { createActionFactory } from './utils';\n\nexport const dataKey = 'tracks';\nconst createAction = createActionFactory(dataKey);\n\nconst fetching = {\n  started: createAction('fetching/started'),\n  error: createAction('fetching/error'),\n  received: createAction('fetching/received'),\n};\n\nexport default StrictDict({\n  fetching: StrictDict(fetching),\n});\n","import { StrictDict } from 'utils';\n\nimport app from './app';\nimport assignmentTypes from './assignmentTypes';\nimport cohorts from './cohorts';\nimport config from './config';\nimport filters from './filters';\nimport grades from './grades';\nimport roles from './roles';\nimport tracks from './tracks';\n\nexport default StrictDict({\n  app,\n  assignmentTypes,\n  cohorts,\n  config,\n  filters,\n  grades,\n  roles,\n  tracks,\n});\n","import { StrictDict } from 'utils';\n\nexport const pageSize = 25;\nexport const historyRecordLimit = 5;\n\nexport const paramKeys = StrictDict({\n  cohortId: 'cohort_id',\n  pageSize: 'page_size',\n  userContains: 'user_contains',\n  enrollmentMode: 'enrollment_mode',\n  assignment: 'assignment',\n  assignmentGradeMin: 'assignment_grade_min',\n  assignmentGradeMax: 'assignment_grade_max',\n  courseGradeMin: 'course_grade_min',\n  courseGradeMax: 'course_grade_max',\n  excludedCourseRoles: 'excluded_course_roles',\n});\n","import queryString from 'query-string';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { filters } from 'data/constants/filters';\n\n/**\n * get(url)\n * simple wrapper providing an authenticated Http client get action\n * @param {string} url - target url\n */\nexport const get = (...args) => getAuthenticatedHttpClient().get(...args);\n/**\n * post(url, data)\n * simple wrapper providing an authenticated Http client post action\n * @param {string} url - target url\n * @param {object|string} data - post payload\n */\nexport const post = (...args) => getAuthenticatedHttpClient().post(...args);\n\n/**\n * stringifyUrl(url, query)\n * simple wrapper around queryString.stringifyUrl that sets skip behavior\n * @param {string} url - base url string\n * @param {object} query - query parameters\n */\nexport const stringifyUrl = (url, query) => queryString.stringifyUrl(\n  { url, query },\n  { skipNull: true, skipEmptyString: true },\n);\n\n/**\n * filterQuery(options)\n * Takes current filter object and returns it with only valid filters that are\n * set and have non-'All' values\n * @param {object} options - filter values\n * @return {object} - valid filters that are set and do not equal 'All'\n */\nexport const filterQuery = (options) => Object.values(filters)\n  .filter(filter => options[filter] && options[filter] !== 'All')\n  .reduce(\n    (obj, filter) => ({ ...obj, [filter]: options[filter] }),\n    {},\n  );\n","import { getConfig } from '@edx/frontend-platform';\nimport { StrictDict } from 'utils';\nimport { historyRecordLimit } from './constants';\nimport { filterQuery, stringifyUrl } from './utils';\n\nconst courseId = window.location.pathname.split('/').filter(Boolean).pop() || '';\n\nexport const getUrlPrefix = () => `${getConfig().LMS_BASE_URL}/api/`;\nexport const getBulkGradesUrl = () => `${getUrlPrefix()}bulk_grades/course/${courseId}/`;\nexport const getEnrollmentUrl = () => `${getUrlPrefix()}enrollment/v1/`;\nexport const getGradesUrl = () => `${getUrlPrefix()}grades/v1/`;\nexport const getGradebookUrl = () => `${getGradesUrl()}gradebook/${courseId}/`;\nexport const getBulkUpdateUrl = () => `${getGradebookUrl()}bulk-update`;\nexport const getInterventionUrl = () => `${getBulkGradesUrl()}intervention/`;\nexport const getCohortsUrl = () => `${getUrlPrefix()}cohorts/v1/courses/${courseId}/cohorts/`;\nexport const getTracksUrl = () => `${getEnrollmentUrl()}course/${courseId}?include_expired=1`;\nexport const getBulkHistoryUrl = () => `${getBulkUpdateUrl()}history/`;\nexport const getAssignmentTypesUrl = () => stringifyUrl(`${getGradebookUrl()}grading-info`, { graded_only: true });\nexport const getRolesUrl = () => stringifyUrl(`${getEnrollmentUrl()}roles/`, { courseId });\n/**\n * bulkGradesUrlByCourseAndRow(courseId, rowId)\n * returns the bulkGrades url with the given rowId.\n * @param {string} rowId - row/error identifier\n * @return {string} - bulk grades fetch url\n */\nexport const bulkGradesUrlByRow = (rowId) => stringifyUrl(getBulkGradesUrl(), { error_id: rowId });\n\nexport const gradeCsvUrl = (options = {}) => stringifyUrl(getBulkGradesUrl(), filterQuery(options));\n\nexport const interventionExportCsvUrl = (options = {}) => (\n  stringifyUrl(getInterventionUrl(), filterQuery(options))\n);\n\nexport const sectionOverrideHistoryUrl = (subsectionId, userId) => stringifyUrl(\n  `${getGradesUrl()}subsection/${subsectionId}/`,\n  { user_id: userId, history_record_limit: historyRecordLimit },\n);\n\nexport const instructorDashboardUrl = () => (\n  `${getConfig().LMS_BASE_URL}/courses/${courseId}/instructor`\n);\n\nexport default StrictDict({\n  getUrlPrefix,\n  getBulkGradesUrl,\n  getEnrollmentUrl,\n  getGradesUrl,\n  getGradebookUrl,\n  getBulkUpdateUrl,\n  getInterventionUrl,\n  getCohortsUrl,\n  getTracksUrl,\n  getBulkHistoryUrl,\n  getAssignmentTypesUrl,\n  getRolesUrl,\n  bulkGradesUrlByRow,\n  gradeCsvUrl,\n  interventionExportCsvUrl,\n  sectionOverrideHistoryUrl,\n});\n","import { StrictDict } from 'utils';\n\nexport default StrictDict({\n  errors: {\n    missingAssignment: (\n      'Gradebook LMS API requires assignment to be set to filter by min/max assig. grade'\n    ),\n    unhandledResponse: 'unhandled response error',\n  },\n});\n","import { StrictDict } from 'utils';\n\nimport urls, {\n  gradeCsvUrl,\n  sectionOverrideHistoryUrl,\n} from './urls';\nimport { pageSize, paramKeys } from './constants';\nimport messages from './messages';\n\nimport * as utils from './utils';\n\nconst { get, post, stringifyUrl } = utils;\n\n/*********************************************************************************\n * GET Actions\n *********************************************************************************/\nconst assignmentTypes = () => get(urls.getAssignmentTypesUrl());\nconst cohorts = () => get(urls.getCohortsUrl());\nconst roles = () => get(urls.getRolesUrl());\nconst tracks = () => get(urls.getTracksUrl());\n\n/**\n * fetch.gradebookData(searchText, cohort, track, options)\n * fetches updated gradebook data based on current filter selections.\n * Raises an error if assignment grade limits are set, but not assignment.\n * @param {string} searchText - search text filter\n * @param {nunber} cohort - selected cohort filter\n * @param {string} track - selected track filter\n * @param {object} options - additional optional filter values\n * @return {Promise} - get response\n */\nconst gradebookData = (searchText, cohort, track, options = {}) => {\n  if ((options.assignmentGradeMax || options.assignmentGradeMin) && !options.assignment) {\n    throw new Error(messages.errors.missingAssignment);\n  }\n  const queryParams = {\n    [paramKeys.pageSize]: pageSize,\n    [paramKeys.userContains]: searchText,\n    [paramKeys.cohortId]: cohort,\n    [paramKeys.enrollmentMode]: track,\n    [paramKeys.courseGradeMax]: options.courseGradeMax,\n    [paramKeys.courseGradeMin]: options.courseGradeMin,\n    [paramKeys.excludedCourseRoles]: options.includeCourseRoleMembers ? null : ['all'],\n    [paramKeys.assignment]: options.assignment,\n    [paramKeys.assignmentGradeMax]: options.assignmentGradeMax,\n    [paramKeys.assignmentGradeMin]: options.assignmentGradeMin,\n  };\n  return get(stringifyUrl(urls.getGradebookUrl(), queryParams));\n};\n\n/**\n * fetch.gradeBulkOperationHistory()\n * fetches bulk operation history and raises an error if the operation fails\n * @return {Promise} - get response\n */\nconst gradeBulkOperationHistory = () => get(urls.getBulkHistoryUrl())\n  .then(response => response.data)\n  .catch(() => Promise.reject(Error(messages.errors.unhandledResponse)));\n\n/**\n * fetch.gradeOverrideHistory(subsectionId, userId)\n * fetches grade override history for a given user on a given subsection\n * @param {string} subsectionId - subsection identifier\n * @param {string} userId - user identifier\n * @return {Promise} - get response\n */\nconst gradeOverrideHistory = (subsectionId, userId) => (\n  get(sectionOverrideHistoryUrl(subsectionId, userId))\n);\n\n/*********************************************************************************\n * POST Actions\n *********************************************************************************/\n/**\n * updateGradebookData(updateData)\n * sends an update message with new grades overrides\n * @param {object[]} updateData\n *  {\n *    user_id: <int>,\n *    usage_id: <string>\n *    grade: {\n *      earned_all_override: <int>\n *      possible_all_override: <int>\n *      earned_graded_override: <int>\n *      possible_graded_override: <int>\n *    }\n *  }\n * @return {Promise} - post response\n */\nconst updateGradebookData = (updateData) => post(urls.getBulkUpdateUrl(), updateData);\n\n/**\n * uploadGradeCsv(formData)\n * Posts form data to grade csv url.  On success, forwards response data.\n * Reject promise with result on failure.\n * @param {object} formData - new grade data\n * @return {Promise} - post response\n */\nconst uploadGradeCsv = (formData) => (\n  post(gradeCsvUrl(), formData).then((result) => {\n    if (result.status === 200 && !result.data.error_messages.length) {\n      return result.data;\n    }\n    return Promise.reject(result);\n  })\n);\n\nexport default StrictDict({\n  fetch: StrictDict({\n    assignmentTypes,\n    cohorts,\n    gradebookData,\n    gradeBulkOperationHistory,\n    gradeOverrideHistory,\n    roles,\n    tracks,\n  }),\n  updateGradebookData,\n  uploadGradeCsv,\n});\n","import { StrictDict } from 'utils';\nimport api from './api';\nimport urls from './urls';\n\nexport default StrictDict({\n  api,\n  urls,\n});\n","/**\n * Simple selector factory.\n * Takes a list of string keys, and returns a simple slector for each.\n *\n * @function\n * @param {Object|string[]} keys - If passed as object, Object.keys(keys) is used.\n * @return {Object} - object of `{[key]: ({key}) => key}`\n */\nconst simpleSelectorFactory = (transformer, keys) => {\n  const selKeys = Array.isArray(keys) ? keys : Object.keys(keys);\n  return selKeys.reduce(\n    (obj, key) => ({\n      ...obj, [key]: (state) => transformer(state)[key],\n    }),\n    { root: (state) => transformer(state) },\n  );\n};\n\nexport default simpleSelectorFactory;\n","import { StrictDict } from 'utils';\n\nconst EMAIL_HEADING = 'Email';\nconst TOTAL_COURSE_GRADE_HEADING = 'Total Grade (%)';\nconst USERNAME_HEADING = 'Username';\nconst FULL_NAME_HEADING = 'Full Name';\n\nconst GradeFormats = StrictDict({\n  absolute: 'absolute',\n  percent: 'percent',\n});\n\nconst Headings = StrictDict({\n  email: EMAIL_HEADING,\n  totalGrade: TOTAL_COURSE_GRADE_HEADING,\n  username: USERNAME_HEADING,\n  fullName: FULL_NAME_HEADING,\n});\n\nexport {\n  EMAIL_HEADING,\n  TOTAL_COURSE_GRADE_HEADING,\n  USERNAME_HEADING,\n  FULL_NAME_HEADING,\n  GradeFormats,\n  Headings,\n};\n","import { getLocale, isRtl } from '@edx/frontend-platform/i18n';\n\nexport const getLocalizedSlash = () => {\n  // For fractional grades\n  // if we are in a LTR language, we want to use a forward slash.\n  // If we are in a RTL language, we want to use a backslash instead\n  if (isRtl(getLocale())) {\n    return '\\\\';\n  }\n  return '/';\n};\n\nexport const getLocalizedPercentSign = () => {\n  // LTR languages put the percent to the right of a number.\n  // RTL languages put the percent sign to the left of the number.\n  // We can place a non-printing unicode right-to-left marker next to the percent\n  // sign to make it print to the left of the number if we are currently in a LTR language\n  if (isRtl(getLocale())) {\n    return '\\u200f%';\n  }\n  return '%';\n};\n","/* eslint-disable import/no-self-import */\nimport { StrictDict } from 'utils';\n\nimport { Headings, GradeFormats } from 'data/constants/grades';\nimport { formatDateForDisplay } from 'data/actions/utils';\nimport { getLocalizedSlash } from 'i18n/utils';\nimport simpleSelectorFactory from '../utils';\nimport * as module from './grades';\n\n/**\n * getRowsProcessed(historyEntryData)\n * @param {object} historyEntryData - the data param from a bulk management history entry\n * @return {string} - user-facing summary of total/skipped/failed rows.\n */\nexport const getRowsProcessed = ({\n  processed_rows: processed,\n  saved_rows: saved,\n  total_rows: total,\n}) => {\n  const failed = processed - saved;\n  const skipped = total - processed;\n  const summaryEntries = [`${total} Students: ${saved} processed`];\n  if (skipped > 0) { summaryEntries.push(`${skipped} skipped`); }\n  if (failed > 0) { summaryEntries.push(`${failed} failed`); }\n  return summaryEntries.join(', ');\n};\n\n/**\n * formatGradeOverrideForDisplay(historyArray)\n * returns the grade override history results in display format.\n * @param {object[]} historyArray - array of gradeOverrideHistoryResults\n * @return {object[]} - display-formatted history results ({ date, grader, reason, adjustedGrade })\n */\nexport const formatGradeOverrideForDisplay = historyArray => historyArray.map(item => ({\n  date: formatDateForDisplay(new Date(item.history_date)),\n  grader: item.history_user,\n  reason: item.override_reason,\n  adjustedGrade: item.earned_graded_override,\n}));\n\nexport const minGrade = '0';\nexport const maxGrade = '100';\n\n/**\n * formatMaxCourseGrade(percentGrade)\n * Takes a percent grade and returns it unless it is equal to the max grade\n * @param {string} percentGrade - grade percentage\n * @return {string} percent grade or null\n */\nexport const formatMaxCourseGrade = (percentGrade) => (\n  (percentGrade === maxGrade) ? null : percentGrade\n);\n/**\n * formatMinCourseGrade(percentGrade)\n * Takes a percent grade and returns it unless it is equal to the min grade\n * @param {string} percentGrade - grade percentage\n * @return {string} percent grade or null\n */\nexport const formatMinCourseGrade = (percentGrade) => (\n  (percentGrade === minGrade) ? null : percentGrade\n);\n\n/**\n * formatMaxAssignmentGrade(percentGrade, options)\n * Takes a percent grade and returns it unless it is equal to the max grade or\n * the assignment id is set.\n * @param {string} percentGrade - grade percentage\n * @param {object} options - options object ({ assignmentId });\n * @return {string} percent grade or null\n */\nexport const formatMaxAssignmentGrade = (percentGrade, options) => (\n  (percentGrade === maxGrade || !options.assignmentId) ? null : percentGrade\n);\n\n/**\n * formatMinAssignmentGrade(percentGrade, options)\n * Takes a percent grade and returns it unless it is equal to the min grade or\n * the assignment id is set.\n * @param {string} percentGrade - grade percentage\n * @param {object} options - options object ({ assignmentId });\n * @return {string} percent grade or null\n */\nexport const formatMinAssignmentGrade = (percentGrade, options) => (\n  (percentGrade === minGrade || !options.assignmentId) ? null : percentGrade\n);\n\n/**\n * headingMapper(category, label='All')\n * Takes category and label filters and returns a method that will take a section breakdown\n * and return the appropriate table headings.\n * @param {string} category - assignment filter type\n * @param {string} label - assignment filter label\n * @return {string[]} - list of table headers\n */\nexport const headingMapper = (category, label = 'All') => {\n  const filters = {\n    all: section => section.label,\n    byCategory: section => section.label && section.category === category,\n    byLabel: section => section.label && section.label === label,\n  };\n\n  let filter;\n  if (label === 'All') {\n    filter = category === 'All' ? filters.all : filters.byCategory;\n  } else {\n    filter = filters.byLabel;\n  }\n  const {\n    username,\n    fullName,\n    email,\n    totalGrade,\n  } = Headings;\n  const filteredLabels = (entry) => entry.filter(filter).map(s => s.label);\n\n  return (entry) => (\n    entry\n      ? [username, fullName, email, ...filteredLabels(entry), totalGrade]\n      : []\n  );\n};\n\n/**\n * transformHistoryEntry(rawEntry)\n * Takes a raw bulkManagementHistory entry and formats it for consumption\n * @param {object} rawEntry - raw history entry to transform\n * @return {object} - transformed history entry\n *  ({ timeUploaded, originalFilename, resultsSummary, ... })\n */\nexport const transformHistoryEntry = ({\n  modified,\n  original_filename: originalFilename,\n  data,\n  unique_id: courseId,\n  id,\n  ...rest\n}) => ({\n  timeUploaded: formatDateForDisplay(new Date(modified)),\n  originalFilename,\n  resultsSummary: {\n    rowId: id,\n    text: module.getRowsProcessed(data),\n  },\n  ...rest,\n});\n\n/**\n * roundGrade(val)\n * Takes a number and rounds it to 2 decimal places\n * defaults to 0\n * @param {number=0} val - value to round.\n * @return {number} - rounded number\n */\nexport const roundGrade = val => parseFloat((val || 0).toFixed(2));\nexport const subsectionGrade = StrictDict({\n  /**\n   * subsectionGrade.absolute(subsection)\n   * returns rounded {earned}/{possible} if attempted, else ${earned}\n   * @param {object} subsection - grade subsection entry\n   * @return {string} - absolute-formatted subsection grade string\n   */\n  [GradeFormats.absolute]: (subsection) => {\n    const earned = module.roundGrade(subsection.score_earned);\n    const possible = module.roundGrade(subsection.score_possible);\n    return subsection.attempted ? `${earned}${getLocalizedSlash()}${possible}` : `${earned}`;\n  },\n  /**\n   * subsectionGrade.percent(subsection)\n   * returns rounded percent times 100\n   * @param {object} subsection - grade subsection entry\n   * @return {string} - percent-formatted subsection grade string\n   */\n  [GradeFormats.percent]: (subsection) => (\n    module.roundGrade(subsection.percent * 100)\n  ),\n});\n\n// Selectors\n/**\n * allGrades(state)\n * returns the top-level redux grades state.\n * @param {object} state - redux state\n * @return {object} - redux grades state\n */\nexport const allGrades = ({ grades: { results } }) => results;\n\n/**\n * bulkImportError(state)\n * returns the stringified bulkManagement import error messages.\n * @param {object} state - redux state\n * @return {string} - bulk import error messages joined into a display form\n *   (or empty string if there are none)\n */\nexport const bulkImportError = ({ grades: { bulkManagement } }) => (\n  (!!bulkManagement && bulkManagement.errorMessages)\n    ? `Errors while processing: ${bulkManagement.errorMessages.join('; ')};`\n    : ''\n);\n\n/**\n * bulkManagementHistory(state)\n * returns the bulkManagement history entries from the grades state\n * @param {object} state - redux state\n * @return {object[]} - list of bulkManagement history entries\n */\nexport const bulkManagementHistory = ({ grades: { bulkManagement } }) => (\n  (bulkManagement.history || [])\n);\n\n/**\n * bulkManagementHistoryEntries(state)\n * returns transformed history entries from bulkManagement grades data.\n * @param {object} state - redux state\n * @return {object[]} - list of transformed bulkManagement history entries\n */\nexport const bulkManagementHistoryEntries = (state) => (\n  module.bulkManagementHistory(state).map(module.transformHistoryEntry)\n);\n\n/**\n * getExampleSectionBreakdown(state)\n * returns section breakdown of first grades result.\n * @param {object} state - redux state\n * @return {object[]} - section breakdown of first grades result.\n */\nexport const getExampleSectionBreakdown = ({ grades }) => (\n  (grades.results[0] || {}).section_breakdown || []\n);\n\n/**\n * gradeOverrides(state)\n * returns the gradeOverride history results\n * @param {object} state - redux state\n * @return {object[]} - grade override history result entries\n */\nexport const gradeOverrides = ({ grades }) => grades.gradeOverrideHistoryResults;\n\n/**\n * hasOverrideErrors(state)\n * returns true iff gradeOverrideHistoryErrors are present\n * @param {object} state - redux state\n * @return {bool} - are there grade override history errors?\n */\nexport const hasOverrideErrors = ({ grades }) => !!grades.gradeOverrideHistoryError;\n\n/**\n * uploadSuccess(state)\n * @param {object} state - redux state\n * @return {bool} - is bulkManagement.uploadSuccess true?\n */\nexport const uploadSuccess = ({ grades: { bulkManagement } }) => (\n  !!bulkManagement && bulkManagement.uploadSuccess\n);\n\nconst simpleSelectors = simpleSelectorFactory(\n  ({ grades }) => grades,\n  [\n    'courseId',\n    'filteredUsersCount',\n    'totalUsersCount',\n    'gradeFormat',\n    'nextPage',\n    'prevPage',\n    'showSpinner',\n    'gradeOverrideCurrentEarnedGradedOverride',\n    'gradeOverrideHistoryError',\n    'gradeOriginalEarnedGraded',\n    'gradeOriginalPossibleGraded',\n    'showSuccess',\n  ],\n);\n\nconst gradeData = ({ grades }) => ({\n  courseId: grades.courseId,\n  filteredUsersCount: grades.filteredUsersCount,\n  totalUsersCount: grades.totalUsersCount,\n  gradeFormat: grades.gradeFormat,\n  showSpinner: grades.showSpinner,\n  gradeOverrideCurrentEarnedGradedOverride: grades.gradeOverrideCurrentEarnedGradedOverride,\n  gradeOverrideHistoryError: grades.gradeOverrideHistoryError,\n  gradeOverrideHistoryResults: grades.gradeOverrideHistoryResults,\n  gradeOriginalEarnedGraded: grades.gradeOriginalEarnedGraded,\n  gradeOriginalPossibleGraded: grades.gradeOriginalPossibleGraded,\n  nextPage: grades.nextPage,\n  prevPage: grades.prevPage,\n  showSuccess: grades.showSuccess,\n});\n\nexport default StrictDict({\n  bulkImportError,\n  formatGradeOverrideForDisplay,\n  formatMinAssignmentGrade,\n  formatMaxAssignmentGrade,\n  formatMaxCourseGrade,\n  formatMinCourseGrade,\n  hasOverrideErrors,\n  headingMapper,\n\n  roundGrade,\n  subsectionGrade,\n\n  ...simpleSelectors,\n  gradeData,\n  allGrades,\n  bulkManagementHistoryEntries,\n  getExampleSectionBreakdown,\n  gradeOverrides,\n  uploadSuccess,\n});\n","/* eslint-disable import/no-self-import */\nimport { StrictDict } from 'utils';\nimport simpleSelectorFactory from '../utils';\nimport * as module from './app';\nimport { minGrade, maxGrade } from './grades';\n\n/**\n * assignmentGradeLimits(state)\n * returns an object of local assignmentGradeMin/Max\n * @param {object} state - redux state\n * @return {object} - { assignmentGradeMin, assignmentGradeMax }\n */\nconst assignmentGradeLimits = (\n  { app: { filters: { assignmentGradeMin, assignmentGradeMax } } },\n) => ({ assignmentGradeMin, assignmentGradeMax });\n\n/**\n * courseGradeFilterValidity(state)\n * returns { isMaxValid, isMinValid } with each course grade limit, verifying they\n * are between minGrade and maxGrade (0, 100).\n * @param {object} state - redux state\n * @return {object} - { isMaxValid, isMinValid }\n */\nexport const courseGradeFilterValidity = ({ app: { filters } }) => {\n  const isFilterValid = (value) => {\n    const intValue = parseInt(value, 10);\n    return intValue >= minGrade && intValue <= maxGrade;\n  };\n  return {\n    isMaxValid: isFilterValid(filters.courseGradeMax),\n    isMinValid: isFilterValid(filters.courseGradeMin),\n  };\n};\n\n/**\n * courseGradeLimits(state)\n * returns an object of local courseGradeMin/Max\n * @param {object} state - redux state\n * @return {object} - { courseGradeMin, courseGradeMax }\n */\nconst courseGradeLimits = (\n  { app: { filters: { courseGradeMin, courseGradeMax } } },\n) => ({ courseGradeMin, courseGradeMax });\n\n/**\n * editUpdateDate(state)\n * builds object for update api call from edit modal.\n * @param {object} state - redux state\n * @return {object} - object to pass as update date to updateGrades to apply editModal changes\n */\nconst editUpdateData = ({ app: { modalState } }) => ([{\n  grade: {\n    comment: modalState.reasonForChange,\n    earned_graded_override: modalState.adjustedGradeValue,\n  },\n  usage_id: modalState.updateModuleId,\n  user_id: modalState.updateUserId,\n}]);\n\n/**\n * areCourseGradeFiltersValid(state)\n * returns true iff both min and max course grade filters are valid (within bounds)\n * @param {object} state - redux state\n * @return {bool} - are both filters valid?\n */\nconst areCourseGradeFiltersValid = (state) => {\n  const validity = module.courseGradeFilterValidity(state);\n  return validity.isMinValid && validity.isMaxValid;\n};\n\nconst isFilterMenuClosed = ({ app: { filterMenu } }) => (\n  !filterMenu.open && !filterMenu.transitioning\n);\n\nconst isFilterMenuOpening = ({ app: { filterMenu } }) => (\n  filterMenu.transitioning && filterMenu.open\n);\n\nconst modalSelectors = simpleSelectorFactory(\n  ({ app: { modalState } }) => modalState,\n  [\n    'assignmentName',\n    'adjustedGradePossible',\n    'adjustedGradeValue',\n    'open',\n    'reasonForChange',\n    'todaysDate',\n    'updateUserName',\n  ],\n);\n\nconst modalData = ({ app: { modalState } }) => ({\n  assignmentName: modalState.assignmentName,\n  adjustedGradePossible: modalState.adjustedGradePossible,\n  adjustedGradeValue: modalState.adjustedGradeValue,\n  open: modalState.open,\n  reasonForChange: modalState.reasonForChange,\n  todaysDate: modalState.todaysDate,\n  updateUserName: modalState.updateUserName,\n});\n\nconst filterMenuSelectors = simpleSelectorFactory(\n  ({ app: { filterMenu } }) => filterMenu,\n  ['open', 'transitioning'],\n);\n\nconst simpleSelectors = simpleSelectorFactory(\n  ({ app }) => app,\n  [\n    'activeView',\n    'courseId',\n    'filters',\n    'searchValue',\n    'showImportSuccessToast',\n  ],\n);\n\nexport default StrictDict({\n  areCourseGradeFiltersValid,\n  assignmentGradeLimits,\n  courseGradeFilterValidity,\n  courseGradeLimits,\n  editUpdateData,\n  isFilterMenuClosed,\n  isFilterMenuOpening,\n  ...simpleSelectors,\n  modalState: StrictDict(modalSelectors),\n  modalData,\n  filterMenu: StrictDict({\n    ...filterMenuSelectors,\n    isClosed: isFilterMenuClosed,\n    isOpening: isFilterMenuOpening,\n  }),\n});\n","import { StrictDict } from 'utils';\n\nconst areGradesFrozen = ({ assignmentTypes }) => assignmentTypes.areGradesFrozen;\nconst allAssignmentTypes = ({ assignmentTypes }) => assignmentTypes.results;\n\nexport default StrictDict({\n  areGradesFrozen,\n  allAssignmentTypes,\n});\n","/* eslint-disable import/no-self-import */\nimport { StrictDict } from 'utils';\nimport * as module from './cohorts';\n\n/**\n * allCohorts(state)\n * returns top-level cohorts results data\n * @param {object} state - redux state\n * @return {object[]} - list of cohort objects from fetch results\n */\nexport const allCohorts = (state) => state.cohorts.results || [];\n\n/**\n * getCohortById(state, selectedCohortId)\n * returns cohort with given id\n * @param {object} state - redux state\n * @param {number} selectedCohortId - id of cohort to return\n * @return {object} cohort with given id.\n */\nexport const getCohortById = (state, selectedCohortId) => {\n  const cohort = module.allCohorts(state).find(({ id }) => id === selectedCohortId);\n  return cohort;\n};\n\n/**\n * getCohortNameById(state, selectedCohortId)\n * return name of cohort with given id\n * @param {object} state - redux state\n * @param {number} selectedCohortId - id of cohort whose name is requested\n * @return {string} - name of cohort with the given id\n */\nconst getCohortNameById = (state, selectedCohortId) => (\n  module.getCohortById(state, selectedCohortId) || {}\n).name;\n\n/**\n * cohortsByName(state)\n * returns an object of all cohorts keyed by name\n * @param {object} state - redux state\n * @return {object} - all cohorts, keyed by name\n */\nconst cohortsByName = (state) => module.allCohorts(state).reduce(\n  (obj, cohort) => ({ ...obj, [cohort.name]: cohort }),\n  {},\n);\n\nexport default StrictDict({\n  cohortsByName,\n  getCohortById,\n  getCohortNameById,\n  allCohorts,\n});\n","/* eslint-disable import/no-self-import */\nimport { StrictDict } from 'utils';\n\nimport initialFilters from 'data/constants/filters';\nimport simpleSelectorFactory from '../utils';\nimport * as module from './filters';\n\n// Transformers\n/**\n * isDefault(name, value)\n * returns true iff the value is equal to the initial filter value\n * associated with the given name\n * @param {string} name - api filter name\n * @param {string/number/bool} value - filter value\n * @return {bool} - is this the default value for the given filter?\n */\nexport const isDefault = (name, value) => (\n  value === initialFilters[name]\n);\n\n/**\n * chooseRelevantAssignmentData(assignment)\n * formats the assignment api data for an assignment object for consumption\n * @param {object} assignment - assignment data to prepare\n * @return {object} - formatted data ({ label, subsectionLabel, type, id })\n */\nexport const chooseRelevantAssignmentData = ({\n  label,\n  subsection_name: subsectionLabel,\n  category: type,\n  module_id: id,\n}) => ({\n  label, subsectionLabel, type, id,\n});\n\n/**\n * getAssignmentsFromResultsSubstate(results)\n * returns the section_breakdown of the first results entry\n * defaulting to an empty list.\n * @param {[object[]]} results - list of result entries from grades fetch\n * @return {object} - section_breakdown of first grade entry\n */\nexport const getAssignmentsFromResultsSubstate = (results) => (\n  (results[0] || {}).section_breakdown || []\n);\n\n/**\n * relevantAssignmentDataFromResults\n * returns assignment info from grades results for the assignment with the given id\n * @param {object} grades - grades fetch result\n * @param {string} id - selected assignment id from assignment filter\n * @return {object} assignment data with type, label, and subsectionLabel\n */\nexport const relevantAssignmentDataFromResults = (grades, id) => (\n  module.getAssignmentsFromResultsSubstate(grades)\n    .map(module.chooseRelevantAssignmentData)\n    .find(assignment => assignment.id === id)\n);\n\n// Selectors\n/**\n * allFilters(state)\n * returns the top-level filter state.\n * @param {object} state - redux state\n * @return {object} - filter substate from redux state\n */\nexport const allFilters = (state) => state.filters || {};\n\n/**\n * areAssignmentGradeFiltersSet(state)\n * Returns true iff either assignmentGradeMax or assignmentGradeMax is set.\n * @param {object} state - redux state\n * @return {bool} - are assignmentGrade filters set?\n */\nexport const areAssignmentGradeFiltersSet = ({ filters }) => !!(\n  filters.assignmentGradeMax || filters.assignmentGradeMin\n);\n\n/**\n * selectableAssignments(state)\n * @param {object} state - redux state\n * @return {object[]} - list of selectable assignment objects, filtered if there is an\n *   assignmentType filter selected.\n */\nexport const selectableAssignments = (state) => {\n  const selectedAssignmentType = allFilters(state).assignmentType;\n  const needToFilter = selectedAssignmentType && selectedAssignmentType !== 'All';\n  const allAssignments = getAssignmentsFromResultsSubstate(state.grades.results);\n  if (needToFilter) {\n    return allAssignments.filter(\n      (assignment) => assignment.category === selectedAssignmentType,\n    );\n  }\n  return allAssignments;\n};\n\n/**\n * Returns the relevant assignment data for all selectable assignments\n * @param {object} state - redux state\n * @return {object[]} - object of assignment data entries [({ label, subsectionLabel, type, id })]\n */\nexport const selectableAssignmentLabels = (state) => (\n  selectableAssignments(state).map(chooseRelevantAssignmentData)\n);\n\nexport const simpleSelectors = simpleSelectorFactory(\n  ({ filters }) => filters,\n  [\n    'assignment',\n    'assignmentGradeMax',\n    'assignmentGradeMin',\n    'assignmentType',\n    'cohort',\n    'courseGradeMax',\n    'courseGradeMin',\n    'track',\n    'includeCourseRoleMembers',\n  ],\n);\n/**\n * Returns the id of the selected assignment filter\n * @param {object} state - redux state\n * @return {string} - assignment id\n */\nexport const selectedAssignmentId = (state) => (simpleSelectors.assignment(state) || {}).id;\n\n/**\n * selectedAssignmentLabel(state)\n * Returns the label of the selected assignment filter\n * @param {object} state - redux state\n * @return {string} - assignment label\n */\nexport const selectedAssignmentLabel = (state) => (simpleSelectors.assignment(state) || {}).label;\n\n/**\n * Returns the api value for excludedCourseRoles based on the\n * internal Bool value for includeCourseRoleMembers.\n * @param {object} state - redux state\n * @return {string} - '' if to be included, else 'all'\n */\nexport const excludedCourseRoles = (state) => (\n  simpleSelectors.includeCourseRoleMembers(state) ? '' : 'all'\n);\n\nexport default StrictDict({\n  ...simpleSelectors,\n  isDefault,\n  relevantAssignmentDataFromResults,\n  selectedAssignmentId,\n  selectedAssignmentLabel,\n  selectableAssignmentLabels,\n  selectableAssignments,\n  allFilters,\n  areAssignmentGradeFiltersSet,\n  chooseRelevantAssignmentData,\n  excludedCourseRoles,\n  getAssignmentsFromResultsSubstate,\n});\n","import { StrictDict } from 'utils';\n\nconst canUserViewGradebook = ({ roles }) => !!roles.canUserViewGradebook;\n\nexport default StrictDict({\n  canUserViewGradebook,\n});\n","/* eslint-disable import/no-self-import */\nimport { StrictDict } from 'utils';\nimport * as module from './tracks';\n\nexport const mastersKey = 'masters';\n\n/**\n * hasMastersTrack(tracks)\n * returns true if at least one track in the list is masters track\n * @param {object[]} tracks - list of track objects\n * @return {bool} - are any of the tracks a masters track?\n */\nexport const hasMastersTrack = tracks => tracks.some(({ slug }) => slug === mastersKey);\n\n// Selectors\n/**\n * allTracks(state)\n * returns all tracks resuls from top-level redux state\n * @param {object} state - redux state\n * @return {object[]} - list of track result entries\n */\nexport const allTracks = state => state.tracks.results || [];\n\n/**\n * stateHasMastersTrack(state)\n * returns true if the state has a masters track entry.\n * @param {object} state - redux state\n * @return {bool} - does the state have a masters track entry?\n */\nexport const stateHasMastersTrack = (state) => module.hasMastersTrack(module.allTracks(state));\n\n/**\n * tracksByName(state)\n * returns an object of all tracks keyed by name\n * @param {object} state - redux state\n * @return {object} - all tracks, keyed by name\n */\nexport const tracksByName = (state) => module.allTracks(state).reduce(\n  (obj, track) => ({ ...obj, [track.name]: track }),\n  {},\n);\n\nexport default StrictDict({\n  allTracks,\n  hasMastersTrack,\n  stateHasMastersTrack,\n  tracksByName,\n});\n","import { StrictDict } from 'utils';\n\nimport lms from 'data/services/lms';\nimport * as filterConstants from 'data/constants/filters';\n\nimport * as module from '.';\nimport app from './app';\nimport assignmentTypes from './assignmentTypes';\nimport cohorts from './cohorts';\nimport filters from './filters';\nimport grades, { minGrade, maxGrade } from './grades';\nimport roles from './roles';\nimport tracks from './tracks';\n\nconst {\n  filterConfig,\n  filters: filterNames,\n} = filterConstants;\n\n/**\n * editModalPossibleGrade(state)\n * Returns the \"possible\" grade as shown in the edit modal.\n * @param {object} state - redux state;\n * @return {string} - possibleGrade to show on edit modal\n */\nexport const editModalPossibleGrade = (state) => (\n  app.modalState.adjustedGradePossible(state) || grades.gradeOriginalPossibleGraded(state)\n);\n\n/**\n * filterBadgeConfig(state, name)\n * Takes a filter name and returns the appropriate badge config, with value and isDefault.\n * Determines if it should return a range or single-value config based on the presence of\n * a filterOrder prop in the filter config associated with the passed name.\n * @param {object} state - redux state\n * @param {string} name - api filter name\n */\nexport const filterBadgeConfig = (state, name) => {\n  const filterValue = module.filterBadgeValues[name](state);\n  const { filterOrder, ...config } = filterConfig[name];\n  const isRange = !!filterOrder;\n  const value = isRange ? `${filterValue[0]} - ${filterValue[1]}` : filterValue;\n  const isDefault = (isRange\n    ? (\n      filters.isDefault(filterOrder[0], filterValue[0])\n      && filters.isDefault(filterOrder[1], filterValue[1])\n    )\n    : filters.isDefault(name, filterValue)\n  );\n  return { ...config, value, isDefault };\n};\n\n/**\n * filterBadgeValues methods\n * For each filter type with an associated badge, provides a selector that returns the\n * content of that badge\n */\nexport const filterBadgeValues = StrictDict({\n  [filterNames.assignment]: (state) => (\n    filters.selectedAssignmentLabel(state) || ''\n  ),\n  [filterNames.assignmentType]: filters.assignmentType,\n  [filterNames.includeCourseRoleMembers]: filters.includeCourseRoleMembers,\n  [filterNames.cohort]: (state) => {\n    const entry = module.selectedCohortEntry(state);\n    return entry ? entry.name : '';\n  },\n  [filterNames.track]: (state) => {\n    const entry = module.selectedTrackEntry(state);\n    return entry ? entry.name : '';\n  },\n  [filterNames.assignmentGrade]: (state) => ([\n    filters.assignmentGradeMin(state),\n    filters.assignmentGradeMax(state),\n  ]),\n  [filterNames.courseGrade]: (state) => ([\n    filters.courseGradeMin(state),\n    filters.courseGradeMax(state),\n  ]),\n});\n\n/**\n * formattedGradeLimits(state)\n * Returns an object of local grade limits, formatted for fetching.\n * This means only setting any of them if the assignment is set, and only setting an\n * individual min/max if they are not equal to the default min/max.\n * @param {object} state - redux state\n * @return {object} - { assignmentGradeMax, assignmentGradeMin, courseGradeMax, courseGradeMin }\n */\nexport const formattedGradeLimits = (state) => {\n  const { assignmentGradeMax, assignmentGradeMin } = app.assignmentGradeLimits(state);\n  const { courseGradeMax, courseGradeMin } = app.courseGradeLimits(state);\n  const hasAssignment = filters.selectedAssignmentId(state) !== undefined;\n\n  return {\n    assignmentGradeMax: (assignmentGradeMax === maxGrade || !hasAssignment) ? null : assignmentGradeMax,\n    assignmentGradeMin: (assignmentGradeMin === minGrade || !hasAssignment) ? null : assignmentGradeMin,\n    courseGradeMax: courseGradeMax === maxGrade ? null : courseGradeMax,\n    courseGradeMin: courseGradeMin === minGrade ? null : courseGradeMin,\n  };\n};\n\n/**\n * getHeadings(state)\n * Returns the table headings given the current assignmentType and assignmentLabel filters.\n * @param {object} state - redux state\n * @return {string[]} - array of table headings\n */\nexport const getHeadings = (state) => grades.headingMapper(\n  filters.assignmentType(state) || 'All',\n  filters.selectedAssignmentLabel(state) || 'All',\n)(grades.getExampleSectionBreakdown(state));\n\n/**\n * gradeExportUrl(state, options)\n * Returns the output of getGradeCsvUrl, applying the current includeCourseRoleMembers\n * filter.\n * @param {object} state - redux state\n * @return {string} - generated grade export url\n */\nexport const gradeExportUrl = (state) => (\n  lms.urls.gradeCsvUrl(module.lmsApiServiceArgs(state))\n);\n\n/**\n * interventionExportUrl(state, options)\n * Returns the output of getInterventionExportUrl.\n * @param {object} state - redux state\n * @return {string} - generated intervention export url\n */\nexport const interventionExportUrl = (state) => (\n  lms.urls.interventionExportCsvUrl(module.lmsApiServiceArgs(state))\n);\n\n/**\n * lmsApiServiceArgs(state)\n * Returns common lms api service request args.\n * @param {object} state - redux state\n * @return {object} lms api query params object\n */\nexport const lmsApiServiceArgs = (state) => ({\n  cohort: cohorts.getCohortNameById(state, filters.cohort(state)),\n  track: filters.track(state),\n  assignment: filters.selectedAssignmentId(state),\n  assignmentType: filters.assignmentType(state),\n  assignmentGradeMin: grades.formatMinAssignmentGrade(\n    filters.assignmentGradeMin(state),\n    { assignmentId: filters.selectedAssignmentId(state) },\n  ),\n  assignmentGradeMax: grades.formatMaxAssignmentGrade(\n    filters.assignmentGradeMax(state),\n    { assignmentId: filters.selectedAssignmentId(state) },\n  ),\n  courseGradeMin: grades.formatMinCourseGrade(filters.courseGradeMin(state)),\n  courseGradeMax: grades.formatMaxCourseGrade(filters.courseGradeMax(state)),\n  excludedCourseRoles: filters.excludedCourseRoles(state),\n});\n\n/**\n * localFilters(state)\n * returns local filter data for fetchGrades call\n * @param {object} state - redux state\n * @return {object} - fetch arguments signifying current local filter state\n */\nexport const localFilters = (state) => {\n  const id = filters.selectedAssignmentId(state);\n  const searchText = app.searchValue(state);\n  return {\n    assignment: id,\n    includeCourseRoleMembers: filters.includeCourseRoleMembers(state),\n    ...module.formattedGradeLimits(state),\n    ...(searchText !== '' && { searchText }),\n  };\n};\n\n/**\n * selectedCohortEntry(state)\n * Returns the full entry data for the selected cohort\n * @param {object} state - redux state\n * @return {object} - selected cohort entry object\n */\nexport const selectedCohortEntry = (state) => (\n  cohorts.allCohorts(state).find(\n    ({ id }) => id === parseInt(filters.cohort(state), 10),\n  )\n);\n\n/**\n * selectedTrackEntry(state)\n * Returns the full entry data for the selected track\n * @param {object} state - redux state\n * @return {object} - selected track entry object\n */\nexport const selectedTrackEntry = (state) => (\n  tracks.allTracks(state).find(\n    ({ slug }) => slug === filters.track(state),\n  )\n);\n\n/**\n * shouldShowSpinner(state)\n * Returns true iff the user can view the gradebook and grades.showSpinner is true.\n * @param {object} state - redux state\n * @return {bool} - should show spinner?\n */\nexport const shouldShowSpinner = (state) => (\n  roles.canUserViewGradebook(state)\n  && grades.showSpinner(state)\n);\n\n/**\n * showBulkManagement(state, options)\n * Returns true iff the course has bulk management enabled\n * @param {object} state - redux state\n * @return {bool} - should show bulk management controls?\n */\nexport const showBulkManagement = (state) => (state.config.bulkManagementAvailable);\n\nexport default StrictDict({\n  root: StrictDict({\n    editModalPossibleGrade,\n    filterBadgeConfig,\n    getHeadings,\n    gradeExportUrl,\n    interventionExportUrl,\n    localFilters,\n    selectedCohortEntry,\n    selectedTrackEntry,\n    shouldShowSpinner,\n    showBulkManagement,\n  }),\n  app,\n  assignmentTypes,\n  cohorts,\n  filters,\n  grades,\n  roles,\n  tracks,\n});\n","import initialFilters from '../constants/filters';\nimport { views } from '../constants/app';\nimport { formatDateForDisplay } from '../actions/utils';\nimport actions from '../actions/app';\nimport filterActions from '../actions/filters';\nimport gradesActions from '../actions/grades';\n\nconst initialState = {\n  courseId: '',\n  activeView: views.grades,\n  filters: {\n    assignmentGradeMax: initialFilters.assignmentGradeMax,\n    assignmentGradeMin: initialFilters.assignmentGradeMin,\n    courseGradeMax: initialFilters.courseGradeMax,\n    courseGradeMin: initialFilters.courseGradeMin,\n  },\n  modalState: {\n    open: false,\n    adjustedGradePossible: '',\n    adjustedGradeValue: 0,\n    assignmentName: '',\n    reasonForChange: '',\n    todaysDate: '',\n    updateModuleId: null,\n    updateUserId: null,\n    updateUserName: null,\n  },\n  filterMenu: {\n    open: false,\n    transitioning: false,\n  },\n  showImportSuccessToast: false,\n  searchValue: '',\n};\n\nconst app = (state = initialState, { type, payload } = {}) => {\n  switch (type) {\n    case actions.closeModal.toString():\n      return { ...state, modalState: { ...initialState.modalState } };\n    case actions.setCourseId.toString():\n      return { ...state, courseId: payload };\n    case actions.filterMenu.startTransition.toString():\n      return {\n        ...state,\n        filterMenu: { ...state.filterMenu, transitioning: true },\n      };\n    case actions.filterMenu.endTransition.toString():\n      return {\n        ...state,\n        filterMenu: { ...state.filterMenu, transitioning: false },\n      };\n    case actions.filterMenu.toggle.toString():\n      return {\n        ...state,\n        filterMenu: { ...state.filterMenu, open: !state.filterMenu.open },\n      };\n    case actions.setLocalFilter.toString():\n      return {\n        ...state,\n        filters: { ...state.filters, ...payload },\n      };\n    case actions.setModalState.toString():\n      return {\n        ...state,\n        modalState: { ...state.modalState, ...payload },\n      };\n    case actions.setModalStateFromTable.toString(): {\n      const { subsection, userEntry } = payload;\n      return {\n        ...state,\n        modalState: {\n          adjustedGradeValue: '',\n          open: true,\n          reasonForChange: '',\n          todaysDate: formatDateForDisplay(new Date()),\n\n          adjustedGradePossible: subsection.attempted ? subsection.score_possible : '',\n          assignmentName: `${subsection.subsection_name}`,\n          updateModuleId: subsection.module_id,\n          updateUserId: userEntry.user_id,\n          updateUserName: userEntry.username,\n        },\n      };\n    }\n    case actions.setSearchValue.toString():\n      return { ...state, searchValue: payload };\n    case actions.setShowImportSuccessToast.toString():\n      return { ...state, showImportSuccessToast: payload };\n    case actions.setView.toString():\n      return { ...state, activeView: payload };\n    // initialize the filter fields that are locally stored\n    case filterActions.initialize.toString():\n      return {\n        ...state,\n        filters: {\n          assignmentGradeMax: payload.assignmentGradeMax,\n          assignmentGradeMin: payload.assignmentGradeMin,\n          courseGradeMax: payload.courseGradeMax,\n          courseGradeMin: payload.courseGradeMin,\n        },\n      };\n    // Reset only the filter fields that are stored locally\n    case filterActions.reset.toString(): {\n      return payload.filter(\n        (filterName) => initialState.filters[filterName] !== undefined,\n      ).reduce((obj, filterName) => ({\n        ...obj,\n        filters: {\n          ...obj.filters,\n          [filterName]: initialFilters[filterName],\n        },\n      }), { ...state });\n    }\n    case gradesActions.csvUpload.finished.toString():\n      return { ...state, showImportSuccessToast: true };\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default app;\n","import actions from '../actions/assignmentTypes';\n\nconst initialState = {\n  results: [],\n  startedFetching: false,\n  errorFetching: false,\n};\n\nconst assignmentTypes = (state = initialState, { type, payload } = {}) => {\n  switch (type) {\n    case actions.fetching.started.toString():\n      return {\n        ...state,\n        startedFetching: true,\n      };\n    case actions.fetching.received.toString():\n      return {\n        ...state,\n        results: payload,\n        errorFetching: false,\n        finishedFetching: true,\n      };\n    case actions.fetching.error.toString():\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    case actions.gotGradesFrozen.toString():\n      return {\n        ...state,\n        areGradesFrozen: payload,\n        errorFetching: false,\n        finishedFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default assignmentTypes;\n","import actions from '../actions/cohorts';\n\nconst initialState = {\n  results: [],\n  startedFetching: false,\n  errorFetching: false,\n};\n\nconst cohorts = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case actions.fetching.started.toString():\n      return {\n        ...state,\n        startedFetching: true,\n      };\n    case actions.fetching.received.toString():\n      return {\n        ...state,\n        results: action.payload,\n        finishedFetching: true,\n        errorFetching: false,\n      };\n    case actions.fetching.error.toString():\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default cohorts;\n","import actions from '../actions/config';\n\nconst initialState = {};\n\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case actions.gotBulkManagementConfig.toString():\n      return {\n        ...state,\n        bulkManagementAvailable: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default reducer;\n","import selectors from 'data/selectors';\nimport actions from '../actions/filters';\nimport gradeActions from '../actions/grades';\nimport initialFilters from '../constants/filters';\n\nconst initialState = {};\n\nconst reducer = (state = initialState, { type: actionType, payload } = {}) => {\n  switch (actionType) {\n    case actions.initialize.toString():\n      return {\n        ...state,\n        ...payload,\n      };\n    case actions.reset.toString(): {\n      const result = { ...state };\n      payload.forEach((filterName) => {\n        result[filterName] = initialFilters[filterName];\n      });\n      return result;\n    }\n    case actions.update.assignment.toString():\n      return {\n        ...state,\n        assignment: payload,\n      };\n    case actions.update.assignmentLimits.toString():\n      return {\n        ...state,\n        assignmentGradeMax: payload.assignmentGradeMax,\n        assignmentGradeMin: payload.assignmentGradeMin,\n      };\n    case actions.update.assignmentType.toString(): {\n      const newState = { ...state, assignmentType: payload };\n      if (payload !== '' && state.assignment && payload !== state.assignment.type) {\n        newState.assignment = '';\n      }\n      return newState;\n    }\n    case actions.update.cohort.toString():\n      return { ...state, cohort: payload };\n    case actions.update.courseGradeLimits.toString():\n      return {\n        ...state,\n        courseGradeMax: payload.courseGradeMax,\n        courseGradeMin: payload.courseGradeMin,\n      };\n    case actions.update.includeCourseRoleMembers.toString():\n      return { ...state, includeCourseRoleMembers: payload };\n    case actions.update.track.toString():\n      return { ...state, track: payload };\n    case gradeActions.fetching.received.toString(): {\n      const { assignment } = state;\n      const { id, type } = assignment || {};\n      if (id && !type) {\n        const { relevantAssignmentDataFromResults } = selectors.filters;\n        const relevantAssignment = relevantAssignmentDataFromResults(\n          payload.grades,\n          id,\n        );\n        return {\n          ...state,\n          track: payload.track,\n          cohort: payload.cohort,\n          assignment: relevantAssignment,\n        };\n      }\n      return {\n        ...state,\n        track: payload.track,\n        cohort: payload.cohort,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default reducer;\n","import actions from '../actions/grades';\nimport filterActions from '../actions/filters';\n\nconst initialState = {\n  results: [],\n  gradeOverrideHistoryResults: [],\n  gradeOverrideCurrentEarnedAllOverride: null,\n  gradeOverrideCurrentPossibleAllOverride: null,\n  gradeOverrideCurrentEarnedGradedOverride: null,\n  gradeOverrideCurrentPossibleGradedOverride: null,\n  gradeOriginalEarnedAll: null,\n  gradeOriginalPossibleAll: null,\n  gradeOriginalEarnedGraded: null,\n  gradeOriginalPossibleGraded: null,\n  headings: [],\n  startedFetching: false,\n  finishedFetching: false,\n  errorFetching: false,\n  overrideHistoryError: '',\n  gradeFormat: 'percent',\n  showSuccess: false,\n  prevPage: null,\n  nextPage: null,\n  showSpinner: true,\n  bulkManagement: {},\n  totalUsersCount: 0,\n  filteredUsersCount: 0,\n  isImportGradesActive: false,\n  isDownloadInterventionsActive: false,\n  isDownloadGradesActive: false,\n};\n\nconst grades = (state = initialState, { type, payload } = {}) => {\n  switch (type) {\n    case actions.banner.open.toString():\n      return {\n        ...state,\n        showSuccess: true,\n      };\n    case actions.banner.close.toString():\n      return {\n        ...state,\n        showSuccess: false,\n      };\n    case actions.bulkHistory.received.toString():\n      return {\n        ...state,\n        bulkManagement: {\n          ...state.bulkManagement,\n          history: payload,\n        },\n      };\n    case actions.csvUpload.started.toString(): {\n      const { errorMessages, uploadSuccess, ...rest } = state.bulkManagement;\n      return {\n        ...state,\n        showSpinner: true,\n        bulkManagement: rest,\n      };\n    }\n    case actions.csvUpload.finished.toString():\n      return {\n        ...state,\n        showSpinner: false,\n        bulkManagement: {\n          ...state.bulkManagement,\n          uploadSuccess: true,\n        },\n      };\n    case actions.csvUpload.error.toString():\n      return {\n        ...state,\n        showSpinner: false,\n        bulkManagement: {\n          ...state.bulkManagement,\n          ...payload,\n        },\n      };\n    case actions.doneViewingAssignment.toString(): {\n      const {\n        gradeOverrideHistoryResults,\n        gradeOverrideCurrentEarnedAllOverride,\n        gradeOverrideCurrentPossibleAllOverride,\n        gradeOverrideCurrentEarnedGradedOverride,\n        gradeOverrideCurrentPossibleGradedOverride,\n        gradeOriginalEarnedAll,\n        gradeOriginalPossibleAll,\n        gradeOriginalEarnedGraded,\n        gradeOriginalPossibleGraded,\n        ...rest\n      } = state;\n      return rest;\n    }\n    case actions.fetching.started.toString():\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n        showSpinner: true,\n      };\n    case actions.fetching.error.toString():\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    case actions.fetching.received.toString():\n      return {\n        ...state,\n        results: payload.grades,\n        headings: payload.headings,\n        finishedFetching: true,\n        errorFetching: false,\n        prevPage: payload.prev,\n        nextPage: payload.next,\n        showSpinner: false,\n        courseId: payload.courseId,\n        totalUsersCount: payload.totalUsersCount,\n        filteredUsersCount: payload.filteredUsersCount,\n      };\n    case actions.overrideHistory.received.toString():\n      return {\n        ...state,\n        gradeOverrideHistoryResults: payload.overrideHistory,\n        gradeOverrideCurrentEarnedAllOverride: payload.currentEarnedAllOverride,\n        gradeOverrideCurrentPossibleAllOverride: payload.currentPossibleAllOverride,\n        gradeOverrideCurrentEarnedGradedOverride: payload.currentEarnedGradedOverride,\n        gradeOverrideCurrentPossibleGradedOverride: payload.currentPossibleGradedOverride,\n        gradeOriginalEarnedAll: payload.originalGradeEarnedAll,\n        gradeOriginalPossibleAll: payload.originalGradePossibleAll,\n        gradeOriginalEarnedGraded: payload.originalGradeEarnedGraded,\n        gradeOriginalPossibleGraded: payload.originalGradePossibleGraded,\n        overrideHistoryError: '',\n      };\n    case actions.overrideHistory.error.toString():\n      return {\n        ...state,\n        finishedFetchingOverrideHistory: true,\n        overrideHistoryError: payload,\n      };\n    case actions.toggleGradeFormat.toString():\n      return {\n        ...state,\n        gradeFormat: payload.target.value,\n      };\n    case actions.update.request.toString():\n      return { ...state, showSpinner: true };\n    case actions.update.success.toString():\n    case actions.update.failure.toString():\n      return { ...state, showSpinner: false };\n\n    case filterActions.update.assignmentType.toString():\n      return {\n        ...state,\n        selectedAssignmentType: payload.filterType,\n        headings: payload.headings,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { initialState as initialGradesState };\nexport default grades;\n","import actions from '../actions/roles';\n\nconst initialState = {\n  canUserViewGradebook: true,\n};\n\nconst roles = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case actions.fetching.received.toString():\n      return {\n        ...state,\n        canUserViewGradebook: action.payload,\n      };\n    case actions.fetching.error.toString():\n      return {\n        ...state,\n        canUserViewGradebook: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default roles;\n","import actions from '../actions/tracks';\n\nconst initialState = {\n  results: [],\n  startedFetching: false,\n  errorFetching: false,\n};\n\nconst tracks = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case actions.fetching.started.toString():\n      return {\n        ...state,\n        startedFetching: true,\n      };\n    case actions.fetching.received.toString():\n      return {\n        ...state,\n        results: action.payload,\n        errorFetching: false,\n        finishedFetching: true,\n      };\n    case actions.fetching.error.toString():\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default tracks;\n","import { combineReducers } from 'redux';\n\nimport app from './app';\nimport assignmentTypes from './assignmentTypes';\nimport cohorts from './cohorts';\nimport config from './config';\nimport filters from './filters';\nimport grades from './grades';\nimport roles from './roles';\nimport tracks from './tracks';\n\n/* istanbul ignore next */\nconst rootReducer = combineReducers({\n  app,\n  assignmentTypes,\n  cohorts,\n  config,\n  filters,\n  grades,\n  roles,\n  tracks,\n});\n\nexport default rootReducer;\n","import { StrictDict } from 'utils';\nimport actions from 'data/actions';\n\nexport const courseId = window.location.pathname.slice(1);\n\nexport const events = StrictDict({\n  receivedRoles: 'receivedRoles',\n  receivedGrades: 'receivedGrades',\n  updateSucceeded: 'updateSucceeded',\n  updateFailed: 'updateFailed',\n  uploadOverrideSucceeded: 'uploadOverrideSucceeded',\n  uploadOverrideFailed: 'uploadOverrideFailed',\n  filterApplied: 'filterApplied',\n  gradesReportDownloaded: 'gradesReportDownloaded',\n  interventionReportDownloaded: 'interventionReportDownloaded',\n});\n\nexport const eventNames = StrictDict({\n  [events.receivedGrades]: 'edx.gradebook.grades.displayed',\n  [events.updateSucceeded]: 'edx.gradebook.grades.grade_override.succeeded',\n  [events.updateFailed]: 'edx.gradebook.grades.grade_override.failed',\n  [events.uploadOverrideSucceeded]: 'edx.gradebook.grades.upload.grades_overrides.succeeded',\n  [events.uploadOverrideFailed]: 'edx.gradebook.grades.upload.grades_overrides.failed',\n  [events.filterApplied]: 'edx.gradebook.grades.filter_applied',\n  [events.gradesReportDownloaded]: 'edx.gradebook.reports.grade_export.downloaded',\n  [events.interventionReportDownloaded]: 'edx.gradebook.reports.intervention.downloaded',\n});\n\nexport const triggers = StrictDict({\n  [events.receivedRoles]: actions.roles.fetching.received.toString(),\n  [events.receivedGrades]: actions.grades.fetching.received.toString(),\n  [events.updateSucceeded]: actions.grades.update.success.toString(),\n  [events.updateFailed]: actions.grades.update.failure.toString(),\n  [events.uploadOverrideSucceeded]: actions.grades.uploadOverride.success.toString(),\n  [events.uploadOverrideFailed]: actions.grades.uploadOverride.failure.toString(),\n  [events.filterApplied]: actions.filters.update.courseGradeLimits.toString(),\n  [events.gradesReportDownloaded]: actions.grades.downloadReport.bulkGrades.toString(),\n  [events.interventionReportDownloaded]: actions.grades.downloadReport.intervention.toString(),\n});\n\nexport const trackingCategory = 'gradebook';\n\nexport const pageViewEvent = { category: trackingCategory, page: courseId };\n","/* eslint-disable import/prefer-default-export */\nimport { trackEvent } from '@redux-beacon/segment';\nimport { courseId, trackingCategory as category } from './constants';\n\nexport const handleEvent = (name, options = {}) => trackEvent(\n  (event = {}) => {\n    const { payload } = event;\n    const { propsFn, extrasFn } = options;\n    return {\n      name,\n      ...(extrasFn && extrasFn(payload)),\n      properties: {\n        category,\n        label: courseId,\n        ...(propsFn && propsFn(payload)),\n      },\n    };\n  },\n);\n","import { trackPageView } from '@redux-beacon/segment';\n\nimport { StrictDict } from 'utils';\nimport { handleEvent } from './utils';\n\nimport {\n  courseId,\n  events,\n  eventNames,\n  trackingCategory,\n  triggers,\n} from './constants';\n\nconst eventsMap = {};\nconst loadTrigger = (event, options = {}) => {\n  eventsMap[triggers[event]] = handleEvent(eventNames[event], options);\n};\n\neventsMap[triggers[events.receivedRoles]] = trackPageView(() => ({\n  category: trackingCategory,\n  page: courseId,\n}));\nloadTrigger(events.receivedGrades, {\n  propsFn: (payload) => ({\n    assignmentType: payload.assignmentType,\n    cohort: payload.cohort,\n    prev: payload.prev,\n    next: payload.next,\n    track: payload.track,\n  }),\n});\nloadTrigger(events.updateSucceeded, {\n  propsFn: ({ responseData }) => ({ updatedGrades: responseData }),\n});\nloadTrigger(events.updateFailed, {\n  propsFn: ({ error }) => ({ error }),\n});\nloadTrigger(events.uploadOverrideSucceeded);\nloadTrigger(events.uploadOverrideFailed, {\n  propsFn: ({ error }) => ({ error }),\n});\nloadTrigger(events.filterApplied, {\n  extrasFn: () => ({ label: courseId }),\n});\nloadTrigger(events.gradesReportDownloaded);\nloadTrigger(events.interventionReportDownloaded);\n\nexport default StrictDict(eventsMap);\n","import * as redux from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport { createLogger } from 'redux-logger';\nimport { createMiddleware } from 'redux-beacon';\nimport Segment from '@redux-beacon/segment';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport actions from './actions';\nimport selectors from './selectors';\nimport reducers from './reducers';\nimport eventsMap from './services/segment/mapping';\n\nexport const createStore = () => {\n  const loggerMiddleware = createLogger();\n\n  const middleware = [thunkMiddleware, loggerMiddleware];\n  // Conditionally add the segmentMiddleware only if the SEGMENT_KEY environment variable exists.\n  if (getConfig().SEGMENT_KEY) {\n    middleware.push(createMiddleware(eventsMap, Segment()));\n  }\n  const store = redux.createStore(\n    reducers,\n    composeWithDevTools(redux.applyMiddleware(...middleware)),\n  );\n\n  /**\n   * Dev tools for redux work\n   */\n  if (process.env.NODE_ENV === 'development') {\n    window.store = store;\n    window.actions = actions;\n    window.selectors = selectors;\n  }\n\n  return store;\n};\n\nconst store = createStore();\n\nexport default store;\n","/* eslint-disable import/no-self-import, import/no-named-as-default-member */\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { StrictDict } from 'utils';\n\nimport GRADE_OVERRIDE_HISTORY_ERROR_DEFAULT_MSG from 'data/constants/errors';\n\nimport grades from 'data/actions/grades';\nimport { sortAlphaAsc } from 'data/actions/utils';\nimport selectors from 'data/selectors';\nimport lms from 'data/services/lms';\n\nimport * as module from './grades';\n\nconst { formatGradeOverrideForDisplay } = selectors.grades;\n\nexport const defaultAssignmentFilter = 'All';\n\nexport const fetchBulkUpgradeHistory = () => (dispatch) => (\n  // todo add loading effect\n  lms.api.fetch.gradeBulkOperationHistory().then(\n    (response) => { dispatch(grades.bulkHistory.received(response)); },\n  ).catch(() => dispatch(grades.bulkHistory.error()))\n);\n\nexport const fetchGrades = (overrides = {}) => (\n  (dispatch, getState) => {\n    dispatch(grades.fetching.started());\n    const { assignmentType, options } = overrides;\n    const cohort = selectors.filters.cohort(getState());\n    const track = selectors.filters.track(getState());\n    const courseId = selectors.app.courseId(getState());\n    const fetchOptions = {\n      ...selectors.root.localFilters(getState()),\n      ...options,\n    };\n    return lms.api.fetch.gradebookData(\n      fetchOptions.searchText || null,\n      cohort,\n      track,\n      fetchOptions,\n    ).then(({ data }) => {\n      dispatch(grades.fetching.received({\n        assignmentType: (assignmentType || selectors.filters.assignmentType(getState())),\n        cohort,\n        courseId,\n        track,\n        grades: data.results.sort(sortAlphaAsc),\n        prev: data.previous,\n        next: data.next,\n        totalUsersCount: data.total_users_count,\n        filteredUsersCount: data.filtered_users_count,\n      }));\n      if (fetchOptions.showSuccess) {\n        dispatch(grades.banner.open());\n      }\n      dispatch(grades.fetching.finished());\n    })\n      .catch(() => {\n        dispatch(grades.fetching.error());\n      });\n  }\n);\n\nexport const fetchGradesIfAssignmentGradeFiltersSet = () => (\n  (dispatch, getState) => {\n    if (selectors.filters.areAssignmentGradeFiltersSet(getState())) {\n      dispatch(module.fetchGrades());\n    }\n  }\n);\n\nexport const fetchGradeOverrideHistory = (subsectionId, userId) => (\n  dispatch => lms.api.fetch.gradeOverrideHistory(subsectionId, userId)\n    .then(({ data }) => {\n      if (data.success) {\n        dispatch(grades.overrideHistory.received({\n          overrideHistory: formatGradeOverrideForDisplay(data.history),\n          currentEarnedAllOverride: data.override ? data.override.earned_all_override : null,\n          currentPossibleAllOverride: data.override ? data.override.possible_all_override : null,\n          currentEarnedGradedOverride: data.override ? data.override.earned_graded_override : null,\n          currentPossibleGradedOverride: data.override\n            ? data.override.possible_graded_override : null,\n          originalGradeEarnedAll: data.original_grade ? data.original_grade.earned_all : null,\n          originalGradePossibleAll: data.original_grade ? data.original_grade.possible_all : null,\n          originalGradeEarnedGraded: data.original_grade\n            ? data.original_grade.earned_graded : null,\n          originalGradePossibleGraded: data.original_grade\n            ? data.original_grade.possible_graded : null,\n        }));\n      } else {\n        dispatch(grades.overrideHistory.error(data.error_message));\n      }\n    })\n    .catch(() => {\n      dispatch(grades.overrideHistory.error(GRADE_OVERRIDE_HISTORY_ERROR_DEFAULT_MSG));\n    })\n);\n\nexport const fetchPrevNextGrades = (endpoint) => (\n  (dispatch, getState) => {\n    dispatch(grades.fetching.started());\n    return getAuthenticatedHttpClient().get(endpoint)\n      .then(({ data }) => data)\n      .then((data) => {\n        dispatch(grades.fetching.received({\n          courseId: selectors.app.courseId(getState()),\n          cohort: selectors.filters.cohort(getState()),\n          track: selectors.filters.track(getState()),\n          assignmentType: selectors.filters.assignmentType(getState()),\n          grades: data.results.sort(sortAlphaAsc),\n          prev: data.previous,\n          next: data.next,\n          filteredUsersCount: data.filtered_users_count,\n          totalUsersCount: data.total_users_count,\n        }));\n        dispatch(grades.fetching.finished());\n      })\n      .catch(() => {\n        dispatch(grades.fetching.error());\n      });\n  }\n);\n\nexport const submitImportGradesButtonData = (formData) => (\n  (dispatch, getState) => {\n    const courseId = selectors.app.courseId(getState());\n    dispatch(grades.csvUpload.started());\n    return lms.api.uploadGradeCsv(formData).then(() => {\n      dispatch(grades.csvUpload.finished());\n      dispatch(grades.uploadOverride.success(courseId));\n    }).catch((error) => {\n      dispatch(grades.uploadOverride.failure({ courseId, error }));\n      if (error.status === 200 && error.data.error_messages.length) {\n        const { error_messages: errorMessages, saved, total } = error.data;\n        return dispatch(grades.csvUpload.error({ errorMessages, saved, total }));\n      }\n      return dispatch(grades.csvUpload.error({ errorMessages: ['Unknown error.'] }));\n    });\n  }\n);\n\nexport const updateGrades = () => (\n  (dispatch, getState) => {\n    const updateData = selectors.app.editUpdateData(getState());\n    dispatch(grades.update.request());\n    return lms.api.updateGradebookData(updateData)\n      .then(({ data }) => {\n        dispatch(grades.update.success({ data }));\n        dispatch(module.fetchGrades({\n          assignmentType: defaultAssignmentFilter,\n          options: { showSuccess: true },\n        }));\n      })\n      .catch((error) => {\n        dispatch(grades.update.failure({ error }));\n      });\n  }\n);\n\nexport default StrictDict({\n  fetchBulkUpgradeHistory,\n  fetchGrades,\n  fetchGradesIfAssignmentGradeFiltersSet,\n  fetchGradeOverrideHistory,\n  fetchPrevNextGrades,\n  submitImportGradesButtonData,\n  updateGrades,\n});\n","const GRADE_OVERRIDE_HISTORY_ERROR_DEFAULT_MSG = 'Error retrieving grade override history.';\n\nexport default GRADE_OVERRIDE_HISTORY_ERROR_DEFAULT_MSG;\n","/* eslint-disable import/prefer-default-export */\nimport { StrictDict } from 'utils';\nimport actions from 'data/actions';\nimport lms from 'data/services/lms';\n\nexport const fetchCohorts = () => (\n  (dispatch) => {\n    dispatch(actions.cohorts.fetching.started());\n    return lms.api.fetch.cohorts()\n      .then(({ data }) => {\n        dispatch(actions.cohorts.fetching.received(data));\n      })\n      .catch(() => {\n        dispatch(actions.cohorts.fetching.error());\n      });\n  }\n);\n\nexport default StrictDict({ fetchCohorts });\n","/* eslint-disable import/prefer-default-export */\nimport { StrictDict } from 'utils';\n\nimport lms from 'data/services/lms';\nimport actions from 'data/actions';\n\nexport const fetchTracks = () => (\n  (dispatch) => {\n    dispatch(actions.tracks.fetching.started());\n    return lms.api.fetch.tracks()\n      .then(({ data }) => {\n        dispatch(actions.tracks.fetching.received(data.course_modes));\n      })\n      .catch(() => {\n        dispatch(actions.tracks.fetching.error());\n      });\n  }\n);\n\nexport default StrictDict({\n  fetchTracks,\n});\n","/* eslint-disable import/prefer-default-export */\nimport { StrictDict } from 'utils';\n\nimport lms from 'data/services/lms';\nimport actions from 'data/actions';\n\nimport { fetchBulkUpgradeHistory } from './grades';\n\nconst {\n  assignmentTypes: { fetching, gotGradesFrozen },\n  config: { gotBulkManagementConfig },\n} = actions;\n\nexport const fetchAssignmentTypes = () => (\n  (dispatch) => {\n    dispatch(fetching.started());\n    return lms.api.fetch.assignmentTypes()\n      .then(({ data }) => {\n        dispatch(fetching.received(Object.keys(data.assignment_types)));\n        dispatch(gotGradesFrozen(data.grades_frozen));\n        dispatch(gotBulkManagementConfig(data.can_see_bulk_management));\n        if (data.can_see_bulk_management) {\n          dispatch(fetchBulkUpgradeHistory());\n        }\n      })\n      .catch(() => {\n        dispatch(fetching.error());\n      });\n  }\n);\n\nexport default StrictDict({ fetchAssignmentTypes });\n","/* eslint-disable import/prefer-default-export */\nimport { StrictDict } from 'utils';\nimport roles from 'data/actions/roles';\nimport selectors from 'data/selectors';\n\nimport lms from 'data/services/lms';\n\nimport { fetchCohorts } from './cohorts';\nimport { fetchGrades } from './grades';\nimport { fetchTracks } from './tracks';\nimport { fetchAssignmentTypes } from './assignmentTypes';\n\nexport const allowedRoles = ['staff', 'instructor', 'support'];\n\nexport const fetchRoles = () => (\n  (dispatch, getState) => {\n    const courseId = selectors.app.courseId(getState());\n    return lms.api.fetch.roles()\n      .then(({ data }) => {\n        const isAllowedRole = (role) => (\n          (role.course_id === courseId) && allowedRoles.includes(role.role)\n        );\n        const canUserViewGradebook = (data.is_staff || (data.roles.some(isAllowedRole)));\n        dispatch(roles.fetching.received({ canUserViewGradebook }));\n        if (canUserViewGradebook) {\n          dispatch(fetchGrades());\n          dispatch(fetchTracks());\n          dispatch(fetchCohorts());\n          dispatch(fetchAssignmentTypes());\n        }\n      })\n      .catch(() => {\n        dispatch(roles.fetching.error());\n      });\n  }\n);\n\nexport default StrictDict({\n  allowedRoles,\n  fetchRoles,\n});\n","/* eslint-disable import/no-self-import */\nimport { StrictDict } from 'utils';\n\nimport actions from 'data/actions';\nimport selectors from 'data/selectors';\nimport { fetchGradeOverrideHistory } from './grades';\nimport { fetchRoles } from './roles';\nimport * as module from './app';\n\nexport const initialize = (courseId, urlQuery) => (dispatch) => {\n  dispatch(actions.app.setCourseId(courseId));\n  dispatch(actions.filters.initialize(urlQuery));\n  dispatch(fetchRoles());\n};\n\nexport const filterMenu = StrictDict({\n  close: () => (dispatch, getState) => {\n    if (selectors.app.filterMenu.open(getState())) {\n      dispatch(module.filterMenu.toggle());\n    }\n  },\n  handleTransitionEnd: (event) => (dispatch) => {\n    if (event.currentTarget === event.target) {\n      dispatch(actions.app.filterMenu.endTransition());\n    }\n  },\n  toggle: () => (dispatch) => {\n    dispatch(actions.app.filterMenu.startTransition());\n    const toggleMenu = () => dispatch(actions.app.filterMenu.toggle());\n    const animationCb = () => window.setTimeout(toggleMenu);\n    window.requestAnimationFrame(animationCb);\n  },\n});\n\nexport const setModalStateFromTable = ({ userEntry, subsection }) => (\n  (dispatch) => {\n    dispatch(fetchGradeOverrideHistory(subsection.module_id, userEntry.user_id));\n    dispatch(actions.app.setModalStateFromTable({ subsection, userEntry }));\n  }\n);\n\nexport default StrictDict({\n  initialize,\n  filterMenu,\n  setModalStateFromTable,\n});\n","import { StrictDict } from 'utils';\nimport app from './app';\nimport assignmentTypes from './assignmentTypes';\nimport cohorts from './cohorts';\nimport grades from './grades';\nimport roles from './roles';\nimport tracks from './tracks';\n\nexport default StrictDict({\n  app,\n  assignmentTypes,\n  cohorts,\n  grades,\n  roles,\n  tracks,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\n\nimport selectors from 'data/selectors';\nimport thunkActions from 'data/thunkActions';\n\n/**\n * WithSidebar\n * Simple wrapper around a content component, with a collapsible sidebar, whose open/closed\n * state is drawn from redux.\n *\n * Wraps child react content in a container to enable the sidebar behavior.\n *\n *  @param {JSX} children - page content\n *  @param {JSX} sidebar - sidebar content\n *\n * Ex Usage:\n *   <WithSidebar sidebar={sidebarContent} sidebarHeader={sidebarHeader}>{children}</WithSidebar>\n */\nexport class WithSidebar extends React.Component {\n  get sidebarClassNames() {\n    return classNames('sidebar', { open: this.props.open, 'd-none': this.props.isClosed });\n  }\n\n  get contentClassNames() {\n    return classNames('sidebar-contents', 'position-relative', {\n      opening: this.props.isOpening,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex sidebar-container page-gradebook\">\n        <aside className={this.sidebarClassNames} onTransitionEnd={this.props.handleSlideDone}>\n          { this.props.sidebar }\n        </aside>\n        <div className={this.contentClassNames}>\n          { this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nWithSidebar.propTypes = {\n  children: PropTypes.node.isRequired,\n  sidebar: PropTypes.node.isRequired,\n  // redux\n  isClosed: PropTypes.bool.isRequired,\n  isOpening: PropTypes.bool.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleSlideDone: PropTypes.func.isRequired,\n};\n\nexport const mapStateToProps = (state) => ({\n  open: selectors.app.filterMenu.open(state),\n  isClosed: selectors.app.filterMenu.isClosed(state),\n  isOpening: selectors.app.filterMenu.isOpening(state),\n});\n\nexport const mapDispatchToProps = {\n  handleSlideDone: thunkActions.app.filterMenu.handleTransitionEnd,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithSidebar);\n","import { useSelector } from 'react-redux';\n\nimport { StrictDict } from 'utils';\nimport selectors from 'data/selectors';\n\nconst selectorHook = (selector) => () => useSelector(selector);\n\nexport const root = StrictDict({\n  useEditModalPossibleGrade: selectorHook(selectors.root.editModalPossibleGrade),\n  useGetHeadings: selectorHook(selectors.root.getHeadings),\n  useGradeExportUrl: selectorHook(selectors.root.gradeExportUrl),\n  useInterventionExportUrl: selectorHook(selectors.root.interventionExportUrl),\n  useSelectedCohortEntry: selectorHook(selectors.root.selectedCohortEntry),\n  useSelectedTrackEntry: selectorHook(selectors.root.selectedTrackEntry),\n  useShouldShowSpinner: selectorHook(selectors.root.shouldShowSpinner),\n  useShowBulkManagement: selectorHook(selectors.root.showBulkManagement),\n  useFilterBadgeConfig: (filterName) => useSelector(\n    (state) => selectors.root.filterBadgeConfig(state, filterName),\n  ),\n});\n\nexport const app = StrictDict({\n  useActiveView: selectorHook(selectors.app.activeView),\n  useAssignmentGradeLimits: selectorHook(selectors.app.assignmentGradeLimits),\n  useAreCourseGradeFiltersValid: selectorHook(selectors.app.areCourseGradeFiltersValid),\n  useCourseGradeLimits: selectorHook(selectors.app.courseGradeLimits),\n  useCourseGradeFilterValidity: selectorHook(selectors.app.courseGradeFilterValidity),\n  useCourseId: selectorHook(selectors.app.courseId),\n  useModalData: selectorHook(selectors.app.modalData),\n  useSearchValue: selectorHook(selectors.app.searchValue),\n  useShowImportSuccessToast: selectorHook(selectors.app.showImportSuccessToast),\n});\n\nexport const assignmentTypes = StrictDict({\n  useAllAssignmentTypes: selectorHook(selectors.assignmentTypes.allAssignmentTypes),\n  useAreGradesFrozen: selectorHook(selectors.assignmentTypes.areGradesFrozen),\n});\n\nexport const cohorts = StrictDict({\n  useAllCohorts: selectorHook(selectors.cohorts.allCohorts),\n  // maybe not needed?\n  useCohortsByName: selectorHook(selectors.cohorts.cohortsByName),\n});\n\nexport const filters = StrictDict({\n  useData: selectorHook(selectors.filters.allFilters),\n  useIncludeCourseRoleMembers: selectorHook(selectors.filters.includeCourseRoleMembers),\n  useSelectableAssignmentLabels: selectorHook(selectors.filters.selectableAssignmentLabels),\n  useSelectedAssignmentLabel: selectorHook(selectors.filters.selectedAssignmentLabel),\n  useAssignmentType: selectorHook(selectors.filters.assignmentType),\n});\n\nexport const grades = StrictDict({\n  useAllGrades: selectorHook(selectors.grades.allGrades),\n  useUserCounts: () => ({\n    filteredUsersCount: useSelector(selectors.grades.filteredUsersCount),\n    totalUsersCount: useSelector(selectors.grades.totalUsersCount),\n  }),\n  useGradeData: selectorHook(selectors.grades.gradeData),\n  useHasOverrideErrors: selectorHook(selectors.grades.hasOverrideErrors),\n  useShowSuccess: selectorHook(selectors.grades.showSuccess),\n  useSubsectionGrade: ({ gradeFormat, subsection }) => () => (\n    selectors.grades.subsectionGrade[gradeFormat](subsection)\n  ),\n});\n\nexport const roles = StrictDict({\n  useCanUserViewGradebook: selectorHook(selectors.roles.canUserViewGradebook),\n});\n\nexport const tracks = StrictDict({\n  useAllTracks: selectorHook(selectors.tracks.allTracks),\n  // maybe not needed?\n  useTracksByName: selectorHook(selectors.tracks.tracksByName),\n});\n\nexport default StrictDict({\n  app,\n  assignmentTypes,\n  cohorts,\n  filters,\n  grades,\n  roles,\n  tracks,\n  root,\n});\n","import { StrictDict } from 'utils';\n// useDispatch hook wouldn't work here because it is out of scope of the component\nimport store from 'data/store';\n\nexport const actionHook = (action) => () => (...args) => store.dispatch(action(...args));\n\nexport default StrictDict({\n  actionHook,\n});\n","import { StrictDict } from 'utils';\nimport actions from 'data/actions';\nimport { actionHook } from './utils';\n\nconst app = StrictDict({\n  useSetLocalFilter: actionHook(actions.app.setLocalFilter),\n  useSetSearchValue: actionHook(actions.app.setSearchValue),\n  useSetShowImportSuccessToast: actionHook(actions.app.setShowImportSuccessToast),\n  useSetView: actionHook(actions.app.setView),\n  useCloseModal: actionHook(actions.app.closeModal),\n  useSetModalState: actionHook(actions.app.setModalState),\n});\n\nconst filters = StrictDict({\n  useUpdateAssignment: actionHook(actions.filters.update.assignment),\n  useUpdateAssignmentLimits: actionHook(actions.filters.update.assignmentLimits),\n  useUpdateAssignmentType: actionHook(actions.filters.update.assignmentType),\n  useUpdateCohort: actionHook(actions.filters.update.cohort),\n  useUpdateCourseGradeLimits: actionHook(actions.filters.update.courseGradeLimits),\n  useUpdateIncludeCourseRoleMembers: actionHook(actions.filters.update.includeCourseRoleMembers),\n  useUpdateTrack: actionHook(actions.filters.update.track),\n  useResetFilters: actionHook(actions.filters.reset),\n});\n\nconst grades = StrictDict({\n  useDoneViewingAssignment: actionHook(actions.grades.doneViewingAssignment),\n  useDownloadBulkGradesReport: actionHook(actions.grades.downloadReport.bulkGrades),\n  useDownloadInterventionReport: actionHook(actions.grades.downloadReport.intervention),\n  useToggleGradeFormat: actionHook(actions.grades.toggleGradeFormat),\n  useCloseBanner: actionHook(actions.grades.banner.close),\n});\n\nexport default StrictDict({\n  app,\n  filters,\n  grades,\n});\n","import { StrictDict } from 'utils';\nimport thunkActions from 'data/thunkActions';\nimport { actionHook } from './utils';\n\nconst app = StrictDict({\n  filterMenu: {\n    useCloseMenu: actionHook(thunkActions.app.filterMenu.close),\n    useHandleTransitionEnd: actionHook(thunkActions.app.filterMenu.handleTransitionEnd),\n    useToggleMenu: actionHook(thunkActions.app.filterMenu.toggle),\n  },\n  useSetModalStateFromTable: actionHook(thunkActions.app.setModalStateFromTable),\n});\n\nconst grades = StrictDict({\n  useFetchGradesIfAssignmentGradeFiltersSet: actionHook(\n    thunkActions.grades.fetchGradesIfAssignmentGradeFiltersSet,\n  ),\n  useFetchPrevNextGrades: actionHook(thunkActions.grades.fetchPrevNextGrades),\n  useFetchGrades: actionHook(thunkActions.grades.fetchGrades),\n  useSubmitImportGradesButtonData: actionHook(thunkActions.grades.submitImportGradesButtonData),\n  useUpdateGrades: actionHook(thunkActions.grades.updateGrades),\n});\n\nexport default StrictDict({\n  app,\n  grades,\n});\n","import { StrictDict } from 'utils';\n\nimport selectorHooks from './selectors';\nimport actionHooks from './actions';\nimport thunkActionHooks from './thunkActions';\n\nexport const selectors = selectorHooks;\nexport const actions = actionHooks;\nexport const thunkActions = thunkActionHooks;\n\nexport default StrictDict({\n  selectors,\n  actions,\n  thunkActions,\n});\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  backToDashboard: {\n    id: 'gradebook.GradebookHeader.backButton',\n    defaultMessage: 'Back to Dashboard',\n    description: 'Button text to take user back to LMS dashboard in Gradebook Header',\n  },\n  gradebook: {\n    id: 'gradebook.GradebookHeader.appLabel',\n    defaultMessage: 'Gradebook',\n    description: 'Top-level app title in Gradebook Header component',\n  },\n  frozenWarning: {\n    id: 'gradebook.GradebookHeader.frozenWarning',\n    defaultMessage: 'The grades for this course are now frozen. Editing of grades is no longer allowed.',\n    description: 'Warning message in Gradebook Header for frozen messages',\n  },\n  unauthorizedWarning: {\n    id: 'gradebook.GradebookHeader.unauthorizedWarning',\n    defaultMessage: 'You are not authorized to view the gradebook for this course.',\n    description: 'Warning message in Gradebook Header when user is not allowed to view the app',\n  },\n  toActivityLog: {\n    id: 'gradebook.GradebookHeader.toActivityLogButton',\n    defaultMessage: 'View Bulk Management History',\n    description: 'Button text for button navigating to Bulk Managment Activity Log',\n  },\n  toGradesView: {\n    id: 'gradebook.GradebookHeader.toGradesView',\n    defaultMessage: 'Return to Gradebook',\n    description: 'Button text for button navigating to Grades view.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\n\nimport { instructorDashboardUrl } from 'data/services/lms/urls';\nimport useGradebookHeaderData from './hooks';\nimport messages from './messages';\n\nexport const GradebookHeader = () => {\n  const { formatMessage } = useIntl();\n  const {\n    areGradesFrozen,\n    canUserViewGradebook,\n    courseId,\n    handleToggleViewClick,\n    showBulkManagement,\n    toggleViewMessage,\n  } = useGradebookHeaderData();\n  const dashboardUrl = instructorDashboardUrl();\n  return (\n    <div className=\"gradebook-header\">\n      <a href={dashboardUrl} className=\"mb-3\">\n        <span aria-hidden=\"true\">{'<< '}</span>\n        {formatMessage(messages.backToDashboard)}\n      </a>\n      <h1>{formatMessage(messages.gradebook)}</h1>\n      <div className=\"subtitle-row d-flex justify-content-between align-items-center\">\n        <h2>{courseId}</h2>\n        {showBulkManagement && (\n          <Button variant=\"tertiary\" onClick={handleToggleViewClick}>\n            {formatMessage(toggleViewMessage)}\n          </Button>\n        )}\n      </div>\n      {areGradesFrozen && (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          {formatMessage(messages.frozenWarning)}\n        </div>\n      )}\n      {(canUserViewGradebook === false) && (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          {formatMessage(messages.unauthorizedWarning)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GradebookHeader;\n","import { views } from 'data/constants/app';\nimport { actions, selectors } from 'data/redux/hooks';\n\nimport messages from './messages';\n\nexport const useGradebookHeaderData = () => {\n  const activeView = selectors.app.useActiveView();\n  const courseId = selectors.app.useCourseId();\n  const areGradesFrozen = selectors.assignmentTypes.useAreGradesFrozen();\n  const canUserViewGradebook = selectors.roles.useCanUserViewGradebook();\n  const showBulkManagement = selectors.root.useShowBulkManagement();\n  const setView = actions.app.useSetView();\n\n  const handleToggleViewClick = () => setView(\n    activeView === views.grades\n      ? views.bulkManagementHistory\n      : views.grades,\n  );\n\n  const toggleViewMessage = activeView === views.grades\n    ? messages.toActivityLog\n    : messages.toGradesView;\n\n  return {\n    areGradesFrozen,\n    canUserViewGradebook,\n    courseId,\n    showBulkManagement,\n\n    handleToggleViewClick,\n    toggleViewMessage,\n  };\n};\n\nexport default useGradebookHeaderData;\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\n\nimport { StatefulButton, Icon } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport selectors from 'data/selectors';\nimport { StrictDict } from 'utils';\n\nexport const buttonStates = StrictDict({\n  pending: 'pending',\n  default: 'default',\n});\n\n/**\n * <NetworkButton />\n * Simplified Download/Upload button, tied to the app's network status (showSpinner).\n * Provides a button with a default `download` icon along with a label, which should\n * be a transifex-friendly message object.  If the `import` argument is passed, the default\n * icon will be an upload icon.\n * If the app is busy on a network task (showSpinner === true), the button will be disabled\n * and show a spinner/working indicator.\n * The buttons can also be passed an optional className for further css customization.\n * @param {string} className - optional extra css class(es)\n * @param {object} label - transifex-friendly message object\n * @param {func} onClick - button on-click action\n * @param {bool} import - should show import icon instead of download icon in default state.\n */\nexport class NetworkButton extends React.Component {\n  get labels() {\n    const label = <FormattedMessage {...this.props.label} />;\n    return { default: label, pending: label };\n  }\n\n  get icons() {\n    const iconClass = 'fa mr-2';\n    const defaultIcon = this.props.import ? 'fa-upload' : 'fa-download';\n    return {\n      pending: (<Icon className={classNames(iconClass, 'fa-spinner fa-spin')} />),\n      default: (<Icon className={classNames(iconClass, defaultIcon)} />),\n    };\n  }\n\n  get buttonState() {\n    return this.props.showSpinner ? buttonStates.pending : buttonStates.default;\n  }\n\n  render() {\n    return (\n      <StatefulButton\n        labels={this.labels}\n        variant=\"outline-primary\"\n        disabledStates={[buttonStates.pending]}\n        className={classNames('ml-2', this.props.className)}\n        icons={this.icons}\n        state={this.buttonState}\n        onClick={this.props.onClick}\n      />\n    );\n  }\n}\n\nNetworkButton.defaultProps = {\n  className: '',\n  showSpinner: false,\n  import: false,\n};\n\nNetworkButton.propTypes = {\n  className: PropTypes.string,\n  label: PropTypes.shape({\n    id: PropTypes.string,\n    defaultMessage: PropTypes.string,\n    description: PropTypes.string,\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n  import: PropTypes.bool,\n  // redux\n  showSpinner: PropTypes.bool,\n};\n\nexport const mapStateToProps = (state) => ({\n  showSpinner: selectors.root.shouldShowSpinner(state),\n});\nexport default connect(mapStateToProps)(NetworkButton);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  csvUploadLabel: {\n    id: 'gradebook.BulkManagementHistoryView.csvUploadLabel',\n    defaultMessage: 'Upload Grade CSV',\n    description: 'A labeled button to upload a CSV containing course grades.',\n  },\n  importGradesBtnText: {\n    id: 'gradebook.GradesView.importGradesBtnText',\n    defaultMessage: 'Import Grades',\n    description: 'A labeled button to import grades in the BulkManagement Tab File Upload Form',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/button-has-type, import/no-named-as-default */\nimport React from 'react';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { Form } from '@edx/paragon';\n\nimport NetworkButton from 'components/NetworkButton';\nimport messages from './messages';\nimport useImportGradesButtonData from './hooks';\n\n/**\n * <ImportGradesButton />\n * File-type input wrapped with hidden control such that when a valid file is\n * added, it is automattically uploaded.\n */\nexport const ImportGradesButton = () => {\n  const {\n    fileInputRef,\n    gradeExportUrl,\n    handleClickImportGrades,\n    handleFileInputChange,\n  } = useImportGradesButtonData();\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <Form action={gradeExportUrl} method=\"post\">\n        <Form.Group controlId=\"csv\">\n          <Form.Control\n            data-testid=\"file-control\"\n            className=\"d-none\"\n            type=\"file\"\n            label={formatMessage(messages.csvUploadLabel)}\n            onChange={handleFileInputChange}\n            ref={fileInputRef}\n          />\n        </Form.Group>\n      </Form>\n      <NetworkButton\n        className=\"import-grades-btn\"\n        label={messages.importGradesBtnText}\n        onClick={handleClickImportGrades}\n        import\n      />\n    </>\n  );\n};\nImportGradesButton.propTypes = {};\n\nexport default ImportGradesButton;\n","import { useRef } from 'react';\nimport { selectors, thunkActions } from 'data/redux/hooks';\n\nexport const useImportButtonData = () => {\n  const gradeExportUrl = selectors.root.useGradeExportUrl();\n  const submitImportGradesButtonData = thunkActions.grades.useSubmitImportGradesButtonData();\n\n  const fileInputRef = useRef();\n\n  const handleClickImportGrades = () => fileInputRef.current?.click();\n  const handleFileInputChange = () => {\n    if (fileInputRef.current?.files[0]) {\n      const clearInput = () => {\n        fileInputRef.current.value = null;\n      };\n      const formData = new FormData();\n      formData.append('csv', fileInputRef.current.files[0]);\n      submitImportGradesButtonData(formData).then(clearInput);\n    }\n  };\n\n  return {\n    fileInputRef,\n    gradeExportUrl,\n    handleClickImportGrades,\n    handleFileInputChange,\n  };\n};\n\nexport default useImportButtonData;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  downloadGradesBtn: {\n    id: 'gradebook.GradesView.BulkManagementControls.bulkManagementLabel',\n    defaultMessage: 'Download Grades',\n    description: 'A labeled button that allows an admin user to download course grades all at once (in bulk).',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport React from 'react';\n\nimport NetworkButton from 'components/NetworkButton';\nimport ImportGradesButton from '../ImportGradesButton';\n\nimport useBulkManagementControlsData from './hooks';\nimport messages from './messages';\n\n/**\n * <BulkManagementControls />\n * Provides download buttons for Bulk Management and Intervention reports, only if\n * showBulkManagement is set in redus.\n */\nexport const BulkManagementControls = () => {\n  const {\n    show,\n    handleClickExportGrades,\n  } = useBulkManagementControlsData();\n\n  if (!show) { return null; }\n  return (\n    <div className=\"d-flex\">\n      <NetworkButton\n        label={messages.downloadGradesBtn}\n        onClick={handleClickExportGrades}\n      />\n      <ImportGradesButton />\n    </div>\n  );\n};\n\nexport default BulkManagementControls;\n","import { actions, selectors } from 'data/redux/hooks';\n\nexport const useBulkManagementControlsData = () => {\n  const gradeExportUrl = selectors.root.useGradeExportUrl();\n  const showBulkManagement = selectors.root.useShowBulkManagement();\n  const downloadBulkGradesReport = actions.grades.useDownloadBulkGradesReport();\n\n  const handleClickExportGrades = () => {\n    downloadBulkGradesReport();\n    window.location.assign(gradeExportUrl);\n  };\n\n  return {\n    show: showBulkManagement,\n    handleClickExportGrades,\n  };\n};\nexport default useBulkManagementControlsData;\n","import React from 'react';\n\nimport { actions, selectors } from 'data/redux/hooks';\n\nconst useReasonInputData = () => {\n  const ref = React.useRef();\n  const { reasonForChange } = selectors.app.useModalData();\n  const setModalState = actions.app.useSetModalState();\n\n  React.useEffect(() => {\n    ref.current.focus();\n  }, [ref]);\n\n  const onChange = (event) => {\n    setModalState({ reasonForChange: event.target.value });\n  };\n\n  return {\n    value: reasonForChange,\n    onChange,\n    ref,\n  };\n};\n\nexport default useReasonInputData;\n","import React from 'react';\n\nimport { Form } from '@edx/paragon';\n\nimport useReasonInputData from './hooks';\n\nexport const controlTestId = 'reason-input-control';\n\n/**\n * <ReasonInput />\n * Input control for the \"reason for change\" field in the Edit modal.\n */\nexport const ReasonInput = () => {\n  const { ref, value, onChange } = useReasonInputData();\n  return (\n    <Form.Control\n      type=\"text\"\n      name=\"reasonForChange\"\n      data-testid={controlTestId}\n      {...{ value, onChange, ref }}\n    />\n  );\n};\n\nReasonInput.propTypes = {};\n\nexport default ReasonInput;\n","import React from 'react';\n\nimport { Form } from '@edx/paragon';\n\nimport useAdjustedGradeInputData from './hooks';\n\n/**\n * <AdjustedGradeInput />\n * Input control for adjusting the grade of a unit\n * displays an \"/ ${possibleGrade} if there is one in the data model.\n */\nexport const AdjustedGradeInput = () => {\n  const {\n    value,\n    onChange,\n    hintText,\n  } = useAdjustedGradeInputData();\n  return (\n    <span>\n      <Form.Control\n        type=\"text\"\n        name=\"adjustedGradeValue\"\n        value={value}\n        onChange={onChange}\n      />\n      {hintText}\n    </span>\n  );\n};\n\nAdjustedGradeInput.propTypes = {};\n\nexport default AdjustedGradeInput;\n","import { actions, selectors } from 'data/redux/hooks';\nimport { getLocalizedSlash } from 'i18n/utils';\n\nconst useAdjustedGradeInputData = () => {\n  const possibleGrade = selectors.root.useEditModalPossibleGrade();\n  const value = selectors.app.useModalData().adjustedGradeValue;\n  const setModalState = actions.app.useSetModalState();\n  const hintText = possibleGrade && ` ${getLocalizedSlash()} ${possibleGrade}`;\n\n  const onChange = ({ target }) => {\n    setModalState({ adjustedGradeValue: target.value });\n  };\n\n  return {\n    value,\n    onChange,\n    hintText,\n  };\n};\n\nexport default useAdjustedGradeInputData;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  adjustedGradeHeader: {\n    id: 'gradebook.GradesView.EditModal.Overrides.adjustedGradeHeader',\n    defaultMessage: 'Adjusted grade',\n    description: 'Edit Modal Override Table Adjusted grade column header',\n  },\n  dateHeader: {\n    id: 'gradebook.GradesView.EditModal.Overrides.dateHeader',\n    defaultMessage: 'Date',\n    description: 'Edit Modal Override Table Date column header',\n  },\n  graderHeader: {\n    id: 'gradebook.GradesView.EditModal.Overrides.graderHeader',\n    defaultMessage: 'Grader',\n    description: 'Edit Modal Override Table Grader column header',\n  },\n  reasonHeader: {\n    id: 'gradebook.GradesView.EditModal.Overrides.reasonHeader',\n    defaultMessage: 'Reason',\n    description: 'Edit Modal Override Table Reason column header',\n  },\n});\n\nexport default messages;\n","import { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { gradeOverrideHistoryColumns as columns } from 'data/constants/app';\nimport { selectors } from 'data/redux/hooks';\n\nimport messages from './messages';\n\nconst useOverrideTableData = () => {\n  const { formatMessage } = useIntl();\n\n  const hide = selectors.grades.useHasOverrideErrors();\n  const gradeOverrides = selectors.grades.useGradeData().gradeOverrideHistoryResults;\n  const tableProps = {};\n  if (!hide) {\n    tableProps.columns = [\n      { Header: formatMessage(messages.dateHeader), accessor: columns.date },\n      { Header: formatMessage(messages.graderHeader), accessor: columns.grader },\n      { Header: formatMessage(messages.reasonHeader), accessor: columns.reason },\n      { Header: formatMessage(messages.adjustedGradeHeader), accessor: columns.adjustedGrade },\n    ];\n    tableProps.data = gradeOverrides;\n  }\n  return { hide, ...tableProps };\n};\n\nexport default useOverrideTableData;\n","/* eslint-disable react/sort-comp, react/button-has-type, import/no-named-as-default */\nimport React from 'react';\n\nimport { DataTable } from '@edx/paragon';\n\nimport { formatDateForDisplay } from 'utils';\n\nimport ReasonInput from './ReasonInput';\nimport AdjustedGradeInput from './AdjustedGradeInput';\nimport useOverrideTableData from './hooks';\n\n/**\n * <OverrideTable />\n * Table containing previous grade override entries, and an \"edit\" row\n * with todays date, an AdjustedGradeInput and a ReasonInput\n */\n\nexport const OverrideTable = () => {\n  const { hide, columns, data } = useOverrideTableData();\n\n  if (hide) { return null; }\n\n  return (\n    <DataTable\n      columns={columns}\n      data={[\n        ...data,\n        {\n          adjustedGrade: <AdjustedGradeInput />,\n          date: formatDateForDisplay(new Date()),\n          reason: <ReasonInput />,\n        },\n      ]}\n      itemCount={data.length}\n    />\n  );\n};\nOverrideTable.propTypes = {};\n\nexport default OverrideTable;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  assignmentHeader: {\n    id: 'gradebook.GradesView.EditModal.headers.assignment',\n    defaultMessage: 'Assignment',\n    description: 'Edit Modal Assignment header',\n  },\n  currentGradeHeader: {\n    id: 'gradebook.GradesView.EditModal.headers.currentGrade',\n    defaultMessage: 'Current Grade',\n    description: 'Edit Modal Current Grade header',\n  },\n  originalGradeHeader: {\n    id: 'gradebook.GradesView.EditModal.headers.originalGrade',\n    defaultMessage: 'Original Grade',\n    description: 'Edit Modal Original Grade header',\n  },\n  studentHeader: {\n    id: 'gradebook.GradesView.EditModal.headers.student',\n    defaultMessage: 'Student',\n    description: 'Edit Modal Student header',\n  },\n  title: {\n    id: 'gradebook.GradesView.EditModal.title',\n    defaultMessage: 'Edit Grades',\n    description: 'Edit Modal title',\n  },\n  closeText: {\n    id: 'gradebook.GradesView.EditModal.closeText',\n    defaultMessage: 'Cancel',\n    description: 'Edit Modal close button text',\n  },\n  visibility: {\n    id: 'gradebook.GradesView.EditModal.contactSupport',\n    defaultMessage: 'Showing most recent actions (max 5). To see more, please contact support',\n    description: 'Edit Modal visibility hint message',\n  },\n  saveVisibility: {\n    id: 'gradebook.GradesView.EditModal.saveVisibility',\n    defaultMessage: 'Note: Once you save, your changes will be visible to students.',\n    description: 'Edit Modal saved changes effect hint',\n  },\n  saveGrade: {\n    id: 'gradebook.GradesView.EditModal.saveGrade',\n    defaultMessage: 'Save Grades',\n    description: 'Edit Modal Save button label',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * HistoryHeader\n * simple display container for an individual history table header\n * @param {string} id - header id\n * @param {string} label - header label\n * @param {string} value - header value\n */\nconst HistoryHeader = ({ id, label, value }) => (\n  <div>\n    <div className={`grade-history-header grade-history-${id}`}>{label}: </div>\n    <div>{value}</div>\n  </div>\n);\nHistoryHeader.defaultProps = {\n  value: null,\n};\nHistoryHeader.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport default HistoryHeader;\n","import React from 'react';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { StrictDict } from 'utils';\nimport { selectors } from 'data/redux/hooks';\n\nimport messages from './messages';\nimport HistoryHeader from './HistoryHeader';\n\nexport const HistoryKeys = StrictDict({\n  assignment: 'assignment',\n  student: 'student',\n  originalGrade: 'original-grade',\n  currentGrade: 'current-grade',\n});\n\n/**\n * <ModalHeaders />\n * Provides a list of HistoryHeaders for the student name, assignment,\n * original grade, and current override grade.\n */\nexport const ModalHeaders = () => {\n  const { assignmentName, updateUserName } = selectors.app.useModalData();\n  const { currentGrade, originalGrade } = selectors.grades.useGradeData();\n  const { formatMessage } = useIntl();\n  return (\n    <div>\n      <HistoryHeader\n        id={HistoryKeys.assignment}\n        label={formatMessage(messages.assignmentHeader)}\n        value={assignmentName}\n      />\n      <HistoryHeader\n        id={HistoryKeys.student}\n        label={formatMessage(messages.studentHeader)}\n        value={updateUserName}\n      />\n      <HistoryHeader\n        id={HistoryKeys.originalGrade}\n        label={formatMessage(messages.originalGradeHeader)}\n        value={originalGrade}\n      />\n      <HistoryHeader\n        id={HistoryKeys.currentGrade}\n        label={formatMessage(messages.currentGradeHeader)}\n        value={currentGrade}\n      />\n    </div>\n  );\n};\n\nexport default ModalHeaders;\n","import React from 'react';\n\nimport {\n  Button,\n  Alert,\n  ModalDialog,\n  ActionRow,\n} from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport OverrideTable from './OverrideTable';\nimport ModalHeaders from './ModalHeaders';\nimport useEditModalData from './hooks';\nimport messages from './messages';\n\n/**\n * <EditModal />\n * Wrapper component for the modal that allows editing the grade for an individual\n * unit, for a given student.\n * Provides a StatusAlert with override fetch errors if any are found, an OverrideTable\n * (with appropriate headers) for managing the actual override, and a submit button for\n * adjusting the grade.\n * (also provides a close button that clears the modal state)\n */\nexport const EditModal = () => {\n  const { formatMessage } = useIntl();\n  const {\n    onClose,\n    error,\n    handleAdjustedGradeClick,\n    isOpen,\n  } = useEditModalData();\n\n  return (\n    <ModalDialog\n      title={formatMessage(messages.title)}\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"xl\"\n      hasCloseButton\n      isFullscreenOnMobile\n    >\n      <ModalDialog.Body>\n        <div>\n          <ModalHeaders />\n          <Alert variant=\"danger\" show={!!error} dismissible={false}>\n            {error}\n          </Alert>\n          <OverrideTable />\n          <div>{formatMessage(messages.visibility)}</div>\n          <div>{formatMessage(messages.saveVisibility)}</div>\n        </div>\n      </ModalDialog.Body>\n\n      <ModalDialog.Footer>\n        <ActionRow>\n          <ModalDialog.CloseButton variant=\"tertiary\">\n            {formatMessage(messages.closeText)}\n          </ModalDialog.CloseButton>\n          <Button variant=\"primary\" onClick={handleAdjustedGradeClick}>\n            {formatMessage(messages.saveGrade)}\n          </Button>\n        </ActionRow>\n      </ModalDialog.Footer>\n    </ModalDialog>\n  );\n};\n\nexport default EditModal;\n","import { selectors, actions, thunkActions } from 'data/redux/hooks';\n\nexport const useEditModalData = () => {\n  const error = selectors.grades.useGradeData().gradeOverrideHistoryError;\n  const isOpen = selectors.app.useModalData().open;\n  const closeModal = actions.app.useCloseModal();\n  const doneViewingAssignment = actions.grades.useDoneViewingAssignment();\n  const updateGrades = thunkActions.grades.useUpdateGrades();\n\n  const onClose = () => {\n    doneViewingAssignment();\n    closeModal();\n  };\n\n  const handleAdjustedGradeClick = () => {\n    updateGrades();\n    doneViewingAssignment();\n    closeModal();\n  };\n\n  return {\n    onClose,\n    error,\n    handleAdjustedGradeClick,\n    isOpen,\n  };\n};\n\nexport default useEditModalData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { selectors } from 'data/redux/hooks';\n\n/**\n * FilterBadge\n * Base filter badge component, that displays a name and a close button.\n * If showValue is true, it will also display the included value.\n * @param {func} handleClose - close/dismiss filter event, taking a list of filternames\n *   to reset when the filter badge closes.\n * @param {string} filterName - api filter name (for redux connector)\n */\nexport const FilterBadge = ({\n  filterName,\n  handleClose,\n}) => {\n  const { formatMessage } = useIntl();\n  const {\n    displayName,\n    isDefault,\n    hideValue,\n    value,\n    connectedFilters,\n  } = selectors.root.useFilterBadgeConfig(filterName);\n  if (isDefault) {\n    return null;\n  }\n  return (\n    <div>\n      <span className=\"badge badge-info\">\n        <span>{formatMessage(displayName)}</span>\n        <span>\n          {!hideValue ? `: ${value}` : ''}\n        </span>\n        <Button\n          className=\"btn-info\"\n          aria-label=\"close\"\n          onClick={handleClose(connectedFilters)}\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </Button>\n      </span>\n      <br />\n    </div>\n  );\n};\n\nFilterBadge.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  filterName: PropTypes.string.isRequired,\n};\n\nexport default FilterBadge;\n","/* eslint-disable import/no-named-as-default */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { badgeOrder } from 'data/constants/filters';\n\nimport FilterBadge from './FilterBadge';\n\n/**\n * FilterBadges\n * Displays a FilterBadge for each filter type in the data model with their current values.\n * @param {func} handleClose - event taking a list of filternames to reset\n */\nexport const FilterBadges = ({ handleClose }) => (\n  <div>\n    {badgeOrder.map(filterName => (\n      <FilterBadge key={filterName} {...{ handleClose, filterName }} />\n    ))}\n  </div>\n);\nFilterBadges.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n};\n\nexport default FilterBadges;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  visibilityLabel: {\n    id: 'gradebook.GradesTab.usersVisibilityLabel',\n    defaultMessage: 'Showing {filteredUsers} of {totalUsers} total learners',\n    description: 'Users visibility label',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { selectors } from 'data/redux/hooks';\nimport messages from './messages';\n\nexport const BoldText = ({ text }) => (\n  <span className=\"font-weight-bold\">{text}</span>\n);\nBoldText.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n};\n\n/**\n * <FilteredUsersLabel />\n * Simple label component displaying the filtered and total users shown\n */\nexport const FilteredUsersLabel = () => {\n  const { filteredUsersCount, totalUsersCount } = selectors.grades.useUserCounts();\n  const { formatMessage } = useIntl();\n\n  if (!totalUsersCount) {\n    return null;\n  }\n  return formatMessage(\n    messages.visibilityLabel,\n    {\n      filteredUsers: <BoldText text={filteredUsersCount} />,\n      totalUsers: <BoldText text={totalUsersCount} />,\n    },\n  );\n};\nFilteredUsersLabel.propTypes = {};\n\nexport default FilteredUsersLabel;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  editFilters: {\n    id: 'gradebook.GradesView.editFilterLabel',\n    defaultMessage: 'Edit Filters',\n    description: 'A labeled button in the Grades tab that opens/closes the Filters tab, allowing the grades to be filtered',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { Button, Icon } from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { FilterAlt } from '@edx/paragon/icons';\n\nimport { thunkActions } from 'data/redux/hooks';\n\nimport messages from './messages';\n\n/**\n * Controls for filtering the GradebookTable. Contains the \"Edit Filters\" button for opening the filter drawer\n * as well as the search box for searching by username/email.\n */\nexport const FilterMenuToggle = () => {\n  const toggleFilterMenu = thunkActions.app.filterMenu.useToggleMenu();\n  const { formatMessage } = useIntl();\n  return (\n    <Button\n      id=\"edit-filters-btn\"\n      className=\"btn-primary align-self-start\"\n      onClick={toggleFilterMenu}\n    >\n      <Icon src={FilterAlt} /> {formatMessage(messages.editFilters)}\n    </Button>\n  );\n};\n\nFilterMenuToggle.propTypes = {};\n\nexport default FilterMenuToggle;\n","import { StrictDict } from 'utils';\nimport selectors from 'data/selectors';\n\nexport const grades = StrictDict({\n  subsectionGrade: ({ gradeFormat, subsection }) => () => (\n    selectors.grades.subsectionGrade[gradeFormat](subsection)\n  ),\n  roundGrade: selectors.grades.roundGrade,\n});\n\nexport default StrictDict({\n  grades,\n});\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  fullNameHeading: {\n    id: 'gradebook.GradesView.table.headings.fullName',\n    defaultMessage: 'Full Name',\n    description: 'Gradebook table full name column header',\n  },\n  emailHeading: {\n    id: 'gradebook.GradesView.table.headings.email',\n    defaultMessage: 'Email',\n    description: 'Gradebook table email column header',\n  },\n  totalGradeHeading: {\n    id: 'gradebook.GradesView.table.headings.totalGrade',\n    defaultMessage: 'Total Grade (%)',\n    description: 'Gradebook table total grade column header',\n  },\n  usernameHeading: {\n    id: 'gradebook.GradesView.table.headings.username',\n    defaultMessage: 'Username',\n    description: 'Gradebook table username column header',\n  },\n  studentKeyLabel: {\n    id: 'gradebook.GradesView.table.labels.studentKey',\n    defaultMessage: 'Student Key',\n    description: 'Gradebook table Student Key label',\n  },\n  usernameLabel: {\n    id: 'gradebook.GradesView.table.labels.username',\n    defaultMessage: 'Username',\n    description: 'Gradebook table username label',\n  },\n  totalGradePercentage: {\n    id: 'gradebook.GradesView.table.totalGradePercentage',\n    defaultMessage: 'Total Grade values are always displayed as a percentage',\n    description: 'Gradebook table message that total grades are displayed in percent format',\n  },\n  noResultsFound: {\n    id: 'gradebook.GradesView.table.noResultsFound',\n    defaultMessage: 'No results found',\n    description: 'Gradebook table message when no learner results were found',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { StrictDict } from 'utils';\n\n/**\n * Fields.Username\n * simple label field for username, that optionally also displays external_user_key (userKey)\n * if it is provided.\n * @param {string} username - username for display\n * @param {userKey} userKey - external_user_key for display\n */\nconst Username = ({ username, userKey }) => (\n  <div>\n    <span className=\"wrap-text-in-cell\">\n      <div>\n        <div>{username}</div>\n        {userKey && <div className=\"student-key\">{userKey}</div>}\n      </div>\n    </span>\n  </div>\n);\nUsername.defaultProps = {\n  userKey: null,\n};\nUsername.propTypes = {\n  username: PropTypes.string.isRequired,\n  userKey: PropTypes.string,\n};\n\n/**\n * Fields.Text\n * Simple label field for text value.\n * @param {string} value - value for display\n */\nconst Text = ({ value }) => (<span className=\"wrap-text-in-cell\">{value}</span>);\nText.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nexport default StrictDict({\n  Text,\n  Username,\n});\n","import React from 'react';\n\nimport { useIntl, getLocale, isRtl } from '@edx/frontend-platform/i18n';\nimport {\n  Icon,\n  OverlayTrigger,\n  Tooltip,\n} from '@edx/paragon';\n\nimport { StrictDict } from 'utils';\n\nimport messages from './messages';\n\nexport const totalGradePercentageMessage = 'Total Grade values are always displayed as a percentage.';\n\n/**\n * <TotalGradeLabelReplacement />\n * Total Grade column header.\n * displays an overlay tooltip with screen-reader text to indicate total grade percentage\n */\nconst TotalGradeLabelReplacement = () => {\n  const { formatMessage } = useIntl();\n  return (\n    <div>\n      <OverlayTrigger\n        trigger={['hover', 'focus']}\n        key=\"left-basic\"\n        placement={isRtl(getLocale()) ? 'right' : 'left'}\n        overlay={(\n          <Tooltip id=\"course-grade-tooltip\">\n            {formatMessage(messages.totalGradePercentage)}\n          </Tooltip>\n        )}\n      >\n        <div>\n          {formatMessage(messages.totalGradeHeading)}\n          <div id=\"courseGradeTooltipIcon\">\n            <Icon\n              className=\"fa fa-info-circle\"\n              screenReaderText={formatMessage(messages.totalGradePercentage)}\n            />\n          </div>\n        </div>\n      </OverlayTrigger>\n    </div>\n  );\n};\n\n/**\n * Asterisk to display next to heading labels that are only used for masters students\n */\nconst mastersOnlyFieldAsterisk = (\n  <span className=\"font-weight-normal\">*</span>\n);\n\n/**\n * <UsernameLabelReplacement />\n * Username column header.  Lists that Student Key is possibly available\n */\nconst UsernameLabelReplacement = () => {\n  const { formatMessage } = useIntl();\n  return (\n    <div>\n      <div>\n        {formatMessage(messages.usernameHeading)}\n      </div>\n      <div className=\"font-weight-normal student-key\">\n        {formatMessage(messages.studentKeyLabel)}\n        { mastersOnlyFieldAsterisk }\n      </div>\n    </div>\n  );\n};\n\n/**\n * <MastersOnlyLabelReplacement {message}>\n * Column header for fields that are only available for masters students\n */\nconst MastersOnlyLabelReplacement = (message) => {\n  const { formatMessage } = useIntl();\n  return (\n    <div>\n      {formatMessage(message)}\n      { mastersOnlyFieldAsterisk }\n    </div>\n  );\n};\n\nexport default StrictDict({\n  TotalGradeLabelReplacement,\n  UsernameLabelReplacement,\n  MastersOnlyLabelReplacement,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@edx/paragon';\n\nimport { selectors, thunkActions } from 'data/redux/hooks';\nimport transforms from 'data/redux/transforms';\nimport * as module from './GradeButton';\n\nexport const useGradeButtonData = ({ entry, subsection }) => {\n  const areGradesFrozen = selectors.assignmentTypes.useAreGradesFrozen();\n  const { gradeFormat } = selectors.grades.useGradeData();\n  const setModalState = thunkActions.app.useSetModalStateFromTable();\n  const label = transforms.grades.subsectionGrade({ gradeFormat, subsection });\n\n  const onClick = () => {\n    setModalState({\n      userEntry: entry,\n      subsection,\n    });\n  };\n\n  return {\n    areGradesFrozen,\n    label,\n    onClick,\n  };\n};\n\n/**\n * GradeButton\n * The button link for a user's grade for a given subseciton.\n * load formatting based on selected grade format, and on click, opens\n * the editModal, loading in the current entry and subsection.\n * @param {object} entry - user's grade entry\n * @param {object} subsection - user's subsection grade from subsection_breakdown\n */\nexport const GradeButton = ({ entry, subsection }) => {\n  const {\n    areGradesFrozen,\n    label,\n    onClick,\n  } = module.useGradeButtonData({ entry, subsection });\n  return areGradesFrozen\n    ? label\n    : (\n      <Button\n        variant=\"link\"\n        className=\"btn-header grade-button\"\n        onClick={onClick}\n      >\n        {label}\n      </Button>\n    );\n};\nGradeButton.propTypes = {\n  subsection: PropTypes.shape({\n    attempted: PropTypes.bool,\n    percent: PropTypes.number,\n    score_possible: PropTypes.number,\n    subsection_name: PropTypes.string,\n    module_id: PropTypes.string,\n  }).isRequired,\n  entry: PropTypes.shape({\n    user_id: PropTypes.number,\n    username: PropTypes.string,\n  }).isRequired,\n};\n\nexport default GradeButton;\n","import React from 'react';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { selectors } from 'data/redux/hooks';\nimport transforms from 'data/redux/transforms';\nimport { Headings } from 'data/constants/grades';\nimport { getLocalizedPercentSign } from 'i18n/utils';\n\nimport messages from './messages';\nimport Fields from './Fields';\nimport LabelReplacements from './LabelReplacements';\nimport GradeButton from './GradeButton';\n\nconst { roundGrade } = transforms.grades;\n\nexport const useGradebookTableData = () => {\n  const { formatMessage } = useIntl();\n  const grades = selectors.grades.useAllGrades();\n  const headings = selectors.root.useGetHeadings();\n\n  const mapHeaders = (heading) => {\n    let label;\n    if (heading === Headings.totalGrade) {\n      label = <LabelReplacements.TotalGradeLabelReplacement />;\n    } else if (heading === Headings.username) {\n      label = <LabelReplacements.UsernameLabelReplacement />;\n    } else if (heading === Headings.email) {\n      label = <LabelReplacements.MastersOnlyLabelReplacement {...messages.emailHeading} />;\n    } else if (heading === Headings.fullName) {\n      label = <LabelReplacements.MastersOnlyLabelReplacement {...messages.fullNameHeading} />;\n    } else {\n      label = heading;\n    }\n    return { Header: label, accessor: heading };\n  };\n\n  const mapRows = entry => ({\n    [Headings.username]: (\n      <Fields.Username username={entry.username} userKey={entry.external_user_key} />\n    ),\n    [Headings.email]: (<Fields.Email email={entry.email} />),\n    [Headings.totalGrade]: `${roundGrade(entry.percent * 100)}${getLocalizedPercentSign()}`,\n    ...entry.section_breakdown.reduce((acc, subsection) => ({\n      ...acc,\n      [subsection.label]: <GradeButton {...{ entry, subsection }} />,\n    }), {}),\n  });\n\n  const nullMethod = () => null;\n\n  return {\n    columns: headings.map(mapHeaders),\n    data: grades.map(mapRows),\n    grades,\n    nullMethod,\n    emptyContent: formatMessage(messages.noResultsFound),\n  };\n};\n\nexport default useGradebookTableData;\n","import React from 'react';\n\nimport { DataTable } from '@edx/paragon';\n\nimport useGradebookTableData from './hooks';\n\n/**\n * <GraebookTable />\n * This is the wrapper component for the Grades tab gradebook table, holding\n * a row for each user, with a column for their username, email, and total grade,\n * along with one for each subsection in their grade entry.\n */\nexport const GradebookTable = () => {\n  const {\n    columns,\n    data,\n    grades,\n    nullMethod,\n    emptyContent,\n  } = useGradebookTableData();\n\n  return (\n    <div className=\"gradebook-container\">\n      <DataTable\n        columns={columns}\n        data={data}\n        rowHeaderColumnKey=\"username\"\n        hasFixedColumnWidths\n        itemCount={grades.length}\n        RowStatusComponent={nullMethod}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content={emptyContent} />\n      </DataTable>\n    </div>\n  );\n};\n\nGradebookTable.propTypes = {};\n\nexport default GradebookTable;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  description: {\n    id: 'gradebook.GradesView.ImportSuccessToast.description',\n    defaultMessage: 'Import Successful! Grades will be updated momentarily.',\n    description: 'A message congratulating a successful Import of grades',\n  },\n  showHistoryViewBtn: {\n    id: 'gradebook.GradesView.ImportSuccessToast.showHistoryViewBtn',\n    defaultMessage: 'View Activity Log',\n    description: 'The text on a button that loads a view of the Bulk Management Activity Log',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { Toast } from '@edx/paragon';\n\nimport useImportSuccessToastData from './hooks';\n\n/**\n * <ImportSuccessToast />\n * Toast component triggered by successful grade upload.\n * Provides a link to view the Bulk Management History tab.\n */\nexport const ImportSuccessToast = () => {\n  const {\n    action,\n    onClose,\n    show,\n    description,\n  } = useImportSuccessToastData();\n  return (\n    <Toast {...{ action, onClose, show }}>\n      {description}\n    </Toast>\n  );\n};\n\nImportSuccessToast.propTypes = {};\n\nexport default ImportSuccessToast;\n","import { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { actions, selectors } from 'data/redux/hooks';\nimport { views } from 'data/constants/app';\nimport messages from './messages';\n\n/**\n * <ImportSuccessToast />\n * Toast component triggered by successful grade upload.\n * Provides a link to view the Bulk Management History tab.\n */\nexport const useImportSuccessToastData = () => {\n  const { formatMessage } = useIntl();\n\n  const show = selectors.app.useShowImportSuccessToast();\n  const setAppView = actions.app.useSetView();\n  const setShow = actions.app.useSetShowImportSuccessToast();\n\n  const onClose = () => {\n    setShow(false);\n  };\n\n  const handleShowHistoryView = () => {\n    setAppView(views.bulkManagementHistory);\n    setShow(false);\n  };\n\n  return {\n    action: {\n      label: formatMessage(messages.showHistoryViewBtn),\n      onClick: handleShowHistoryView,\n    },\n    onClose,\n    show,\n    description: formatMessage(messages.description),\n  };\n};\n\nexport default useImportSuccessToastData;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  title: {\n    id: 'gradebook.GradesView.InterventionsReport.title',\n    defaultMessage: 'Interventions Report',\n    description: 'The title for the Intervention report subsection',\n  },\n  description: {\n    id: 'gradebook.GradesView.InterventionsReport.description',\n    defaultMessage: 'Need to find students who may be falling behind?  Download the interventions report to obtain engagement metrics such as section attempts and visits.',\n    description: 'The description for the Intervention report subsection',\n  },\n  downloadBtn: {\n    id: 'gradebook.GradesView.InterventionsReport.downloadBtn',\n    defaultMessage: 'Download Interventions',\n    description: 'The labeled button to download the Intervention report from the Grades View',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport NetworkButton from 'components/NetworkButton';\n\nimport messages from './messages';\nimport useInterventionsReportData from './hooks';\n\n/**\n * <InterventionsReport />\n * Provides download buttons for Bulk Management and Intervention reports, only if\n * showBulkManagement is set in redus.\n */\nexport const InterventionsReport = () => {\n  const { show, handleClick } = useInterventionsReportData();\n  const { formatMessage } = useIntl();\n\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h4 className=\"mt-0\">\n        {formatMessage(messages.title)}\n      </h4>\n      <div\n        className=\"d-flex justify-content-between align-items-center\"\n      >\n        <div className=\"intervention-report-description\">\n          {formatMessage(messages.description)}\n        </div>\n        <NetworkButton\n          label={messages.downloadBtn}\n          onClick={handleClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default InterventionsReport;\n","import { actions, selectors } from 'data/redux/hooks';\n\nconst useInterventionsReportData = () => {\n  const interventionExportUrl = selectors.root.useInterventionExportUrl();\n  const showBulkManagement = selectors.root.useShowBulkManagement();\n  const downloadInterventionReport = actions.grades.useDownloadInterventionReport();\n\n  const handleClick = () => {\n    downloadInterventionReport();\n    window.location.assign(interventionExportUrl);\n  };\n\n  return {\n    show: showBulkManagement,\n    handleClick,\n  };\n};\n\nexport default useInterventionsReportData;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  prevPage: {\n    id: 'gradebook.GradesView.PageButtons.prevPage',\n    defaultMessage: 'Previous Page',\n    description: 'Grades tab Previous Page button text',\n  },\n  nextPage: {\n    id: 'gradebook.GradesView.PageButtons.nextPage',\n    defaultMessage: 'Next Page',\n    description: 'Grades tab Next Page button text',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { Button } from '@edx/paragon';\n\nimport usePageButtonsData from './hooks';\n\nexport const PageButtons = () => {\n  const { prev, next } = usePageButtonsData();\n\n  return (\n    <div\n      className=\"d-flex justify-content-center\"\n      style={{ paddingBottom: '20px' }}\n    >\n      <Button\n        style={{ margin: '20px' }}\n        variant=\"outline-primary\"\n        disabled={prev.disabled}\n        onClick={prev.onClick}\n      >\n        {prev.text}\n      </Button>\n      <Button\n        style={{ margin: '20px' }}\n        variant=\"outline-primary\"\n        disabled={next.disabled}\n        onClick={next.onClick}\n      >\n        {next.text}\n      </Button>\n    </div>\n  );\n};\n\nPageButtons.propTypes = {};\n\nexport default PageButtons;\n","import { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { selectors, thunkActions } from 'data/redux/hooks';\nimport messages from './messages';\n\nexport const usePageButtonsData = () => {\n  const { formatMessage } = useIntl();\n\n  const { nextPage, prevPage } = selectors.grades.useGradeData();\n  const getPrevNextGrades = thunkActions.grades.useFetchPrevNextGrades();\n\n  const getPrevGrades = () => {\n    getPrevNextGrades(prevPage);\n  };\n\n  const getNextGrades = () => {\n    getPrevNextGrades(nextPage);\n  };\n\n  return {\n    prev: {\n      disabled: !prevPage,\n      onClick: getPrevGrades,\n      text: formatMessage(messages.prevPage),\n    },\n    next: {\n      disabled: !nextPage,\n      onClick: getNextGrades,\n      text: formatMessage(messages.nextPage),\n    },\n  };\n};\n\nexport default usePageButtonsData;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  scoreView: {\n    id: 'gradebook.GradesView.scoreViewLabel',\n    defaultMessage: 'Score View',\n    description: 'The label for the dropdown list that allows a user to select the Score format',\n  },\n  absolute: {\n    id: 'gradebook.GradesView.absoluteOption',\n    defaultMessage: 'Absolute',\n    description: 'A label within the Score Format dropdown list for the Absolute Grade Score option',\n  },\n  percent: {\n    id: 'gradebook.GradesView.percentOption',\n    defaultMessage: 'Percent',\n    description: 'A label within the Score Format dropdown list for the Percent Grade Score option',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { Form } from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { actions, selectors } from 'data/redux/hooks';\nimport messages from './messages';\n\n/**\n * <ScoreViewInput />\n * redux-connected select control for grade format (percent vs absolute)\n */\nexport const ScoreViewInput = () => {\n  const { formatMessage } = useIntl();\n  const { gradeFormat } = selectors.grades.useGradeData();\n  const toggleFormat = actions.grades.useToggleGradeFormat();\n  return (\n    <Form.Group controlId=\"ScoreView\">\n      <Form.Label>{formatMessage(messages.scoreView)}:</Form.Label>\n      <Form.Control\n        as=\"select\"\n        value={gradeFormat}\n        onChange={toggleFormat}\n      >\n        <option value=\"percent\">{formatMessage(messages.percent)}</option>\n        <option value=\"absolute\">{formatMessage(messages.absolute)}</option>\n      </Form.Control>\n    </Form.Group>\n  );\n};\nScoreViewInput.propTypes = {};\n\nexport default ScoreViewInput;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  label: {\n    id: 'gradebook.GradesView.search.label',\n    defaultMessage: 'Search for a learner',\n    description: 'Text prompting a user to use this functionality to search for a learner',\n  },\n  hint: {\n    id: 'gradebook.GradesView.search.hint',\n    defaultMessage: 'Search by username, email, or student key',\n    description: 'A hint explaining the ways a user can search',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { SearchField } from '@edx/paragon';\nimport useSearchControlsData from './hooks';\n\n/**\n * Controls for filtering the GradebookTable. Contains the \"Edit Filters\" button for opening the filter drawer\n * as well as the search box for searching by username/email.\n */\nexport const SearchControls = () => {\n  const {\n    onSubmit,\n    onBlur,\n    onClear,\n    searchValue,\n    inputLabel,\n    hintText,\n  } = useSearchControlsData();\n\n  return (\n    <div>\n      <SearchField\n        onSubmit={onSubmit}\n        inputLabel={inputLabel}\n        onBlur={onBlur}\n        onClear={onClear}\n        value={searchValue}\n      />\n      <small className=\"form-text text-muted search-help-text\">\n        {hintText}\n      </small>\n    </div>\n  );\n};\n\nSearchControls.propTypes = {};\n\nexport default SearchControls;\n","import { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { actions, selectors, thunkActions } from 'data/redux/hooks';\n\nimport messages from './messages';\n\n/**\n * Controls for filtering the GradebookTable. Contains the \"Edit Filters\" button for opening the filter drawer\n * as well as the search box for searching by username/email.\n */\nexport const useSearchControlsData = () => {\n  const { formatMessage } = useIntl();\n  const searchValue = selectors.app.useSearchValue();\n  const fetchGrades = thunkActions.grades.useFetchGrades();\n  const setSearchValue = actions.app.useSetSearchValue();\n\n  const onBlur = (e) => {\n    setSearchValue(e.target.value);\n  };\n\n  const onClear = () => {\n    setSearchValue('');\n    fetchGrades();\n  };\n\n  const onSubmit = (newValue) => {\n    setSearchValue(newValue);\n    fetchGrades();\n  };\n\n  return {\n    onSubmit,\n    onBlur,\n    onClear,\n    searchValue,\n    inputLabel: formatMessage(messages.label),\n    hintText: formatMessage(messages.hint),\n  };\n};\n\nexport default useSearchControlsData;\n","import React from 'react';\n\nimport { Icon } from '@edx/paragon';\n\nimport { selectors } from 'data/redux/hooks';\n\n/**\n * <SpinnerIcon />\n * Simmple redux-connected icon component that shows a spinner overlay only if\n * redux state says it should.\n */\nexport const SpinnerIcon = () => {\n  const show = selectors.root.useShouldShowSpinner();\n  return show && (\n    <div className=\"spinner-overlay\">\n      <Icon className=\"fa fa-spinner fa-spin fa-5x color-black\" />\n    </div>\n  );\n};\nSpinnerIcon.propTypes = {};\n\nexport default SpinnerIcon;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  editSuccessAlert: {\n    id: 'gradebook.GradesView.editSuccessAlert',\n    defaultMessage: 'The grade has been successfully edited.  You may see a slight delay before updates appear in the Gradebook.',\n    description: 'An alert text for successfully editing  a grade',\n  },\n  maxGradeInvalid: {\n    id: 'gradebook.GradesView.maxCourseGradeInvalid',\n    defaultMessage: 'Maximum course grade must be between 0 and 100',\n    description: 'An alert text for selecting a maximum course grade greater than 100',\n  },\n  minGradeInvalid: {\n    id: 'gradebook.GradesView.minCourseGradeInvalid',\n    defaultMessage: 'Minimum course grade must be between 0 and 100',\n    description: 'An alert text for selecting a minimum course grade less than 0',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { Alert } from '@edx/paragon';\n\nimport useStatusAlertsData from './hooks';\n\nexport const StatusAlerts = () => {\n  const {\n    successBanner,\n    gradeFilter,\n  } = useStatusAlertsData();\n\n  return (\n    <>\n      <Alert\n        variant=\"success\"\n        onClose={successBanner.onClose}\n        show={successBanner.show}\n      >\n        {successBanner.text}\n      </Alert>\n      <Alert\n        variant=\"danger\"\n        dismissible={false}\n        show={gradeFilter.show}\n      >\n        {gradeFilter.text}\n      </Alert>\n    </>\n  );\n};\n\nStatusAlerts.propTypes = {};\n\nexport default StatusAlerts;\n","import { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { actions, selectors } from 'data/redux/hooks';\nimport messages from './messages';\n\nexport const useStatusAlertsData = () => {\n  const { formatMessage } = useIntl();\n\n  const limitValidity = selectors.app.useCourseGradeFilterValidity();\n  const showSuccessBanner = selectors.grades.useShowSuccess();\n  const handleCloseSuccessBanner = actions.grades.useCloseBanner();\n\n  const isCourseGradeFilterAlertOpen = !limitValidity.isMinValid || !limitValidity.isMaxValid;\n\n  const validityMessages = {\n    min: limitValidity.isMinValid ? '' : formatMessage(messages.minGradeInvalid),\n    max: limitValidity.isMaxValid ? '' : formatMessage(messages.maxGradeInvalid),\n  };\n\n  return {\n    successBanner: {\n      onClose: handleCloseSuccessBanner,\n      show: showSuccessBanner,\n      text: formatMessage(messages.editSuccessAlert),\n    },\n    gradeFilter: {\n      show: isCourseGradeFilterAlertOpen,\n      text: `${validityMessages.min}${validityMessages.max}`,\n    },\n  };\n};\nexport default useStatusAlertsData;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  filterStepHeading: {\n    id: 'gradebook.GradesView.filterHeading',\n    defaultMessage: 'Step 1: Filter the Grade Report',\n    description: 'Filter controls container heading string',\n  },\n  gradebookStepHeading: {\n    id: 'gradebook.GradesView.gradebookStepHeading',\n    defaultMessage: 'Step 2: View or Modify Individual Grades',\n    description: 'Alert text for invalid minimum course grade',\n  },\n  mastersHint: {\n    id: 'gradebook.GradesView.mastersHint',\n    defaultMessage: \"available for learners in the Master's track only\",\n    description: 'Masters feature availability hint on Grades Tab',\n  },\n});\n\nexport default messages;\n","import { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { actions, thunkActions } from 'data/redux/hooks';\nimport messages from './messages';\n\nexport const useGradesViewData = ({ updateQueryParams }) => {\n  const { formatMessage } = useIntl();\n  const fetchGrades = thunkActions.grades.useFetchGrades();\n  const resetFilters = actions.filters.useResetFilters();\n\n  const handleFilterBadgeClose = (filterNames) => () => {\n    resetFilters(filterNames);\n    updateQueryParams(filterNames.reduce(\n      (obj, filterName) => ({ ...obj, [filterName]: false }),\n      {},\n    ));\n    fetchGrades();\n  };\n\n  return {\n    stepHeadings: {\n      filter: formatMessage(messages.filterStepHeading),\n      gradebook: formatMessage(messages.gradebookStepHeading),\n    },\n    handleFilterBadgeClose,\n    mastersHint: formatMessage(messages.mastersHint),\n  };\n};\n\nexport default useGradesViewData;\n","/* eslint-disable react/sort-comp, react/button-has-type, import/no-named-as-default */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BulkManagementControls from './BulkManagementControls';\nimport EditModal from './EditModal';\nimport FilterBadges from './FilterBadges';\nimport FilteredUsersLabel from './FilteredUsersLabel';\nimport FilterMenuToggle from './FilterMenuToggle';\nimport GradebookTable from './GradebookTable';\nimport ImportSuccessToast from './ImportSuccessToast';\nimport InterventionsReport from './InterventionsReport';\nimport PageButtons from './PageButtons';\nimport ScoreViewInput from './ScoreViewInput';\nimport SearchControls from './SearchControls';\nimport SpinnerIcon from './SpinnerIcon';\nimport StatusAlerts from './StatusAlerts';\n\nimport useGradesViewData from './hooks';\n\nexport const GradesView = ({ updateQueryParams }) => {\n  const {\n    stepHeadings,\n    handleFilterBadgeClose,\n    mastersHint,\n  } = useGradesViewData({ updateQueryParams });\n\n  return (\n    <>\n      <SpinnerIcon />\n\n      <InterventionsReport />\n      <h3 className=\"step-message-1\">\n        {stepHeadings.filter}\n      </h3>\n\n      <div className=\"d-flex justify-content-between\">\n        <FilterMenuToggle />\n        <SearchControls />\n      </div>\n\n      <FilterBadges handleClose={handleFilterBadgeClose} />\n      <StatusAlerts />\n\n      <h3>{stepHeadings.gradebook}</h3>\n\n      <div className=\"d-flex justify-content-between align-items-center mb-2\">\n        <ScoreViewInput />\n        <BulkManagementControls />\n      </div>\n\n      <FilteredUsersLabel />\n\n      <GradebookTable />\n\n      <PageButtons />\n      <p>* {mastersHint}</p>\n      <EditModal />\n\n      <ImportSuccessToast />\n    </>\n  );\n};\n\nGradesView.propTypes = {\n  updateQueryParams: PropTypes.func.isRequired,\n};\n\nexport default GradesView;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  assignments: {\n    id: 'gradebook.GradebookFilters.assignmentsFilterLabel',\n    defaultMessage: 'Assignments',\n    description: 'Assignment filter group label in Gradebook Filters',\n  },\n  overallGrade: {\n    id: 'gradebook.GradebookFilters.overallGradeFilterLabel',\n    defaultMessage: 'Overall Grade',\n    description: 'Overall Grade filter group label in Gradebook Filters',\n  },\n  studentGroups: {\n    id: 'gradebook.GradebookFilters.studentGroupsFilterLabel',\n    defaultMessage: 'Student Groups',\n    description: 'Student Groups filter group label in Gradebook Filters',\n  },\n  includeCourseTeamMembers: {\n    id: 'gradebook.GradebookFilters.includeCourseTeamMembersFilterLabel',\n    defaultMessage: 'Include Course Team Members',\n    description: 'Include Course Team Members filter label in Gradebook Filters',\n  },\n  assignment: {\n    id: 'gradebook.GradebookFilters.assignmentFilterLabel',\n    defaultMessage: 'Assignment',\n    description: 'Assignment filter select label in Gradebook Filters',\n  },\n  assignmentTypes: {\n    id: 'gradebook.GradebookFilters.assignmentTypesLabel',\n    defaultMessage: 'Assignment Types',\n    description: 'Assignment Types filter select label in Gradebook Filters',\n  },\n  maxGrade: {\n    id: 'gradebook.GradebookFilters.maxGradeFilterLabel',\n    defaultMessage: 'Max Grade',\n    description: 'Max-grade filter select label in Gradebook Filters',\n  },\n  minGrade: {\n    id: 'gradebook.GradebookFilters.minGradeFilterLabel',\n    defaultMessage: 'Min Grade',\n    description: 'Min-grade filter select label in Gradebook Filters',\n  },\n  cohorts: {\n    id: 'gradebook.GradebookFilters.cohorts',\n    defaultMessage: 'Cohorts',\n    description: 'Cohorts filter select label in Gradebook Filters',\n  },\n  cohortAll: {\n    id: 'gradebook.GradebookFilters.cohortsAll',\n    defaultMessage: 'Cohort-All',\n    description: 'Cohorts filter select default in Gradebook Filters',\n  },\n  tracks: {\n    id: 'gradebook.GradebookFilters.tracks',\n    defaultMessage: 'Tracks',\n    description: 'Tracks filter select label in Gradebook Filters',\n  },\n  trackAll: {\n    id: 'gradebook.GradebookFilters.trackAll',\n    defaultMessage: 'Track-All',\n    description: 'Tracks filter select default in Gradebook Filters',\n  },\n  closeFilters: {\n    id: 'gradebook.GradebookFilters.closeFilters',\n    defaultMessage: 'Close Filters',\n    description: 'Button label for Close button in Gradebook Filters',\n  },\n  apply: {\n    id: 'gradebook.GradebookFilters.apply',\n    defaultMessage: 'Apply',\n    description: 'Apply filter button text',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form } from '@edx/paragon';\n\nconst SelectGroup = ({\n  id,\n  label,\n  value,\n  onChange,\n  disabled,\n  options,\n}) => (\n  <div className=\"student-filters\">\n    <Form.Group controlId={id}>\n      <Form.Label>{label}</Form.Label>\n      <Form.Control as=\"select\" {...{ value, onChange, disabled }}>\n        {options}\n      </Form.Control>\n    </Form.Group>\n  </div>\n);\nSelectGroup.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.node).isRequired,\n};\nSelectGroup.defaultProps = {\n  disabled: false,\n};\n\nexport default SelectGroup;\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport SelectGroup from '../SelectGroup';\nimport messages from '../messages';\nimport useAssignmentTypeFilterData from './hooks';\n\nexport const AssignmentTypeFilter = ({ updateQueryParams }) => {\n  const {\n    assignmentTypes,\n    handleChange,\n    isDisabled,\n    selectedAssignmentType,\n  } = useAssignmentTypeFilterData({ updateQueryParams });\n  const { formatMessage } = useIntl();\n  return (\n    <div className=\"student-filters\">\n      <SelectGroup\n        id=\"assignment-types\"\n        label={formatMessage(messages.assignmentTypes)}\n        value={selectedAssignmentType}\n        onChange={handleChange}\n        disabled={isDisabled}\n        options={[\n          <option key=\"0\" value=\"\">All</option>,\n          ...assignmentTypes.map(entry => (\n            <option key={entry} value={entry}>{entry}</option>\n          )),\n        ]}\n      />\n    </div>\n  );\n};\n\nAssignmentTypeFilter.propTypes = {\n  updateQueryParams: PropTypes.func.isRequired,\n};\n\nexport default AssignmentTypeFilter;\n","import { selectors, actions } from 'data/redux/hooks';\n\nexport const useAssignmentTypeFilterData = ({ updateQueryParams }) => {\n  const assignmentTypes = selectors.assignmentTypes.useAllAssignmentTypes() || {};\n  const assignmentFilterOptions = selectors.filters.useSelectableAssignmentLabels();\n  const selectedAssignmentType = selectors.filters.useAssignmentType() || '';\n  const filterAssignmentType = actions.filters.useUpdateAssignmentType();\n\n  const handleChange = (event) => {\n    const assignmentType = event.target.value;\n    filterAssignmentType(assignmentType);\n    updateQueryParams({ assignmentType });\n  };\n\n  return {\n    assignmentTypes,\n    handleChange,\n    isDisabled: assignmentFilterOptions.length === 0,\n    selectedAssignmentType,\n  };\n};\nexport default useAssignmentTypeFilterData;\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\nimport SelectGroup from '../SelectGroup';\nimport useAssignmentFilterData from './hooks';\n\nconst AssignmentFilter = ({ updateQueryParams }) => {\n  const {\n    handleChange,\n    selectedAssignmentLabel,\n    assignmentFilterOptions,\n  } = useAssignmentFilterData({ updateQueryParams });\n  const { formatMessage } = useIntl();\n  const filterOptions = assignmentFilterOptions.map(({ label, subsectionLabel }) => (\n    <option key={label} value={label}>\n      {label}: {subsectionLabel}\n    </option>\n  ));\n  return (\n    <div className=\"student-filters\">\n      <SelectGroup\n        id=\"assignment\"\n        label={formatMessage(messages.assignment)}\n        value={selectedAssignmentLabel}\n        onChange={handleChange}\n        disabled={assignmentFilterOptions.length === 0}\n        options={[\n          <option key=\"0\" value=\"\">All</option>,\n          ...filterOptions,\n        ]}\n      />\n    </div>\n  );\n};\n\nAssignmentFilter.propTypes = {\n  updateQueryParams: PropTypes.func.isRequired,\n};\n\nexport default AssignmentFilter;\n","import {\n  selectors,\n  actions,\n  thunkActions,\n} from 'data/redux/hooks';\n\nexport const useAssignmentFilterData = ({\n  updateQueryParams,\n}) => {\n  const assignmentFilterOptions = selectors.filters.useSelectableAssignmentLabels();\n  const selectedAssignmentLabel = selectors.filters.useSelectedAssignmentLabel() || '';\n\n  const updateAssignmentFilter = actions.filters.useUpdateAssignment();\n  const conditionalFetch = thunkActions.grades.useFetchGradesIfAssignmentGradeFiltersSet();\n\n  const handleChange = ({ target: { value: assignment } }) => {\n    const selectedFilterOption = assignmentFilterOptions.find(\n      ({ label }) => label === assignment,\n    );\n    const { type, id } = selectedFilterOption || {};\n    updateAssignmentFilter({ label: assignment, type, id });\n    updateQueryParams({ assignment: id });\n    conditionalFetch();\n  };\n\n  return {\n    handleChange,\n    selectedAssignmentLabel,\n    assignmentFilterOptions,\n  };\n};\n\nexport default useAssignmentFilterData;\n","/* eslint-disable react/sort-comp */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form } from '@edx/paragon';\n\nconst PercentGroup = ({\n  id,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => (\n  <div className=\"percent-group\">\n    <Form.Group controlId={id}>\n      <Form.Label>{label}</Form.Label>\n      <Form.Control\n        type=\"number\"\n        min={0}\n        max={100}\n        step={1}\n        {...{ value, disabled, onChange }}\n      />\n    </Form.Group>\n    <span className=\"input-percent-label\">%</span>\n  </div>\n);\nPercentGroup.defaultProps = {\n  disabled: false,\n};\nPercentGroup.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport default PercentGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\n\nimport useAssignmentGradeFilterData from './hooks';\nimport messages from '../messages';\nimport PercentGroup from '../PercentGroup';\n\nexport const AssignmentGradeFilter = ({ updateQueryParams }) => {\n  const {\n    assignmentGradeMin,\n    assignmentGradeMax,\n    selectedAssignment,\n    handleSetMax,\n    handleSetMin,\n    handleSubmit,\n  } = useAssignmentGradeFilterData({ updateQueryParams });\n  const { formatMessage } = useIntl();\n  return (\n    <div className=\"grade-filter-inputs\">\n      <PercentGroup\n        id=\"assignmentGradeMin\"\n        label={formatMessage(messages.minGrade)}\n        value={assignmentGradeMin}\n        disabled={!selectedAssignment}\n        onChange={handleSetMin}\n      />\n      <PercentGroup\n        id=\"assignmentGradeMax\"\n        label={formatMessage(messages.maxGrade)}\n        value={assignmentGradeMax}\n        disabled={!selectedAssignment}\n        onChange={handleSetMax}\n      />\n      <div className=\"grade-filter-action\">\n        <Button\n          type=\"submit\"\n          variant=\"outline-secondary\"\n          name=\"assignmentGradeMinMax\"\n          disabled={!selectedAssignment}\n          onClick={handleSubmit}\n        >\n          {formatMessage(messages.apply)}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nAssignmentGradeFilter.propTypes = {\n  updateQueryParams: PropTypes.func.isRequired,\n};\n\nexport default AssignmentGradeFilter;\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport { selectors, actions, thunkActions } from 'data/redux/hooks';\n\nconst useAssignmentGradeFilterData = ({ updateQueryParams }) => {\n  const localAssignmentLimits = selectors.app.useAssignmentGradeLimits();\n  const selectedAssignment = selectors.filters.useSelectedAssignmentLabel();\n  const fetchGrades = thunkActions.grades.useFetchGrades();\n  const setFilter = actions.app.useSetLocalFilter();\n  const updateAssignmentLimits = actions.filters.useUpdateAssignmentLimits();\n\n  const handleSubmit = () => {\n    updateAssignmentLimits(localAssignmentLimits);\n    fetchGrades();\n    updateQueryParams(localAssignmentLimits);\n  };\n\n  const handleSetMax = ({ target: { value } }) => {\n    setFilter({ assignmentGradeMax: value });\n  };\n\n  const handleSetMin = ({ target: { value } }) => {\n    setFilter({ assignmentGradeMin: value });\n  };\n\n  const { assignmentGradeMax, assignmentGradeMin } = localAssignmentLimits;\n  return {\n    assignmentGradeMin,\n    assignmentGradeMax,\n    selectedAssignment,\n    handleSetMax,\n    handleSetMin,\n    handleSubmit,\n  };\n};\n\nexport default useAssignmentGradeFilterData;\n","import PropTypes from 'prop-types';\n\nimport { Button } from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\nimport PercentGroup from '../PercentGroup';\nimport useCourseGradeFilterData from './hooks';\n\nexport const CourseGradeFilter = ({ updateQueryParams }) => {\n  const {\n    max,\n    min,\n    isDisabled,\n    handleApplyClick,\n  } = useCourseGradeFilterData({ updateQueryParams });\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <div className=\"grade-filter-inputs\">\n        <PercentGroup\n          id=\"minimum-grade\"\n          label={formatMessage(messages.minGrade)}\n          value={min.value}\n          onChange={min.onChange}\n        />\n        <PercentGroup\n          id=\"maximum-grade\"\n          label={formatMessage(messages.maxGrade)}\n          value={max.value}\n          onChange={max.onChange}\n        />\n      </div>\n      <div className=\"grade-filter-action\">\n        <Button\n          variant=\"outline-secondary\"\n          onClick={handleApplyClick}\n          disabled={isDisabled}\n        >\n          {formatMessage(messages.apply)}\n        </Button>\n      </div>\n    </>\n  );\n};\n\nCourseGradeFilter.propTypes = {\n  updateQueryParams: PropTypes.func.isRequired,\n};\n\nexport default CourseGradeFilter;\n","import { actions, selectors, thunkActions } from 'data/redux/hooks';\n\nexport const useCourseGradeFilterData = ({\n  updateQueryParams,\n}) => {\n  const isDisabled = !selectors.app.useAreCourseGradeFiltersValid();\n  const localCourseLimits = selectors.app.useCourseGradeLimits();\n  const fetchGrades = thunkActions.grades.useFetchGrades();\n  const setLocalFilter = actions.app.useSetLocalFilter();\n  const updateFilter = actions.filters.useUpdateCourseGradeLimits();\n\n  const handleApplyClick = () => {\n    updateFilter(localCourseLimits);\n    fetchGrades();\n    updateQueryParams(localCourseLimits);\n  };\n\n  const { courseGradeMin, courseGradeMax } = localCourseLimits;\n  return {\n    max: {\n      value: courseGradeMax,\n      onChange: (e) => setLocalFilter({ courseGradeMax: e.target.value }),\n    },\n    min: {\n      value: courseGradeMin,\n      onChange: (e) => setLocalFilter({ courseGradeMin: e.target.value }),\n    },\n    handleApplyClick,\n    isDisabled,\n  };\n};\n\nexport default useCourseGradeFilterData;\n","/* eslint-disable react/sort-comp, react/button-has-type, import/no-named-as-default */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\nimport SelectGroup from '../SelectGroup';\nimport useStudentGroupsFilterData from './hooks';\n\nconst mapOptions = ({ value, name }) => (\n  <option key={name} value={value}>{name}</option>\n);\n\nexport const StudentGroupsFilter = ({ updateQueryParams }) => {\n  const { tracks, cohorts } = useStudentGroupsFilterData({ updateQueryParams });\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <SelectGroup\n        id=\"Tracks\"\n        label={formatMessage(messages.tracks)}\n        value={tracks.value}\n        onChange={tracks.handleChange}\n        options={[\n          <option value={formatMessage(messages.trackAll)} key=\"0\">\n            {formatMessage(messages.trackAll)}\n          </option>,\n          ...tracks.entries.map(mapOptions),\n        ]}\n      />\n      <SelectGroup\n        id=\"Cohorts\"\n        label={formatMessage(messages.cohorts)}\n        value={cohorts.value}\n        disabled={cohorts.isDisabled}\n        onChange={cohorts.handleChange}\n        options={[\n          <option value={formatMessage(messages.cohortAll)} key=\"0\">\n            {formatMessage(messages.cohortAll)}\n          </option>,\n          ...cohorts.entries.map(mapOptions),\n        ]}\n      />\n    </>\n  );\n};\n\nStudentGroupsFilter.propTypes = {\n  updateQueryParams: PropTypes.func.isRequired,\n};\n\nexport default StudentGroupsFilter;\n","import { actions, selectors, thunkActions } from 'data/redux/hooks';\n\nexport const useStudentGroupsFilterData = ({ updateQueryParams }) => {\n  const selectedCohortEntry = selectors.root.useSelectedCohortEntry();\n  const selectedTrackEntry = selectors.root.useSelectedTrackEntry();\n\n  const cohorts = selectors.cohorts.useAllCohorts();\n  const tracks = selectors.tracks.useAllTracks();\n\n  const updateCohort = actions.filters.useUpdateCohort();\n  const updateTrack = actions.filters.useUpdateTrack();\n\n  const fetchGrades = thunkActions.grades.useFetchGrades();\n\n  const handleUpdateTrack = (event) => {\n    const selectedTrackItem = tracks.find(track => track.slug === event.target.value);\n    const track = selectedTrackItem ? selectedTrackItem.slug.toString() : null;\n    updateQueryParams({ track });\n    updateTrack(track);\n    fetchGrades();\n  };\n\n  const handleUpdateCohort = (event) => {\n    const selectedCohortItem = cohorts.find(cohort => cohort.id === parseInt(event.target.value, 10));\n    const cohort = selectedCohortItem ? selectedCohortItem.id.toString() : null;\n    // the param expected to be cohort_id\n    updateQueryParams({ cohort });\n    updateCohort(cohort);\n    fetchGrades();\n  };\n  return {\n    cohorts: {\n      value: selectedCohortEntry?.id || '',\n      isDisabled: cohorts.length === 0,\n      handleChange: handleUpdateCohort,\n      entries: cohorts.map(({ id: value, name }) => ({ value, name })),\n    },\n    tracks: {\n      value: selectedTrackEntry?.slug || '',\n      handleChange: handleUpdateTrack,\n      entries: tracks.map(({ slug: value, name }) => ({ value, name })),\n    },\n  };\n};\n\nexport default useStudentGroupsFilterData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Collapsible,\n  Icon,\n  IconButton,\n  Form,\n} from '@edx/paragon';\nimport { Close } from '@edx/paragon/icons';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\nimport AssignmentTypeFilter from './AssignmentTypeFilter';\nimport AssignmentFilter from './AssignmentFilter';\nimport AssignmentGradeFilter from './AssignmentGradeFilter';\nimport CourseGradeFilter from './CourseGradeFilter';\nimport StudentGroupsFilter from './StudentGroupsFilter';\nimport useGradebookFiltersData from './hooks';\n\nexport const GradebookFilters = ({ updateQueryParams }) => {\n  const {\n    closeMenu,\n    includeCourseTeamMembers,\n  } = useGradebookFiltersData({ updateQueryParams });\n  const { formatMessage } = useIntl();\n  const collapsibleClassName = 'filter-group mb-3';\n  return (\n    <>\n      <div className=\"filter-sidebar-header\">\n        <h2><Icon className=\"fa fa-filter\" /></h2>\n        <IconButton\n          className=\"p-1\"\n          onClick={closeMenu}\n          iconAs={Icon}\n          src={Close}\n          alt={formatMessage(messages.closeFilters)}\n          aria-label={formatMessage(messages.closeFilters)}\n        />\n      </div>\n\n      <Collapsible\n        title={formatMessage(messages.assignments)}\n        defaultOpen\n        className={collapsibleClassName}\n      >\n        <div>\n          <AssignmentTypeFilter updateQueryParams={updateQueryParams} />\n          <AssignmentFilter updateQueryParams={updateQueryParams} />\n          <AssignmentGradeFilter updateQueryParams={updateQueryParams} />\n        </div>\n      </Collapsible>\n\n      <Collapsible\n        title={formatMessage(messages.overallGrade)}\n        defaultOpen\n        className={collapsibleClassName}\n      >\n        <CourseGradeFilter updateQueryParams={updateQueryParams} />\n      </Collapsible>\n\n      <Collapsible\n        title={formatMessage(messages.studentGroups)}\n        defaultOpen\n        className={collapsibleClassName}\n      >\n        <StudentGroupsFilter updateQueryParams={updateQueryParams} />\n      </Collapsible>\n\n      <Collapsible\n        title={formatMessage(messages.includeCourseTeamMembers)}\n        defaultOpen\n        className={collapsibleClassName}\n      >\n        <Form.Checkbox\n          checked={includeCourseTeamMembers.value}\n          onChange={includeCourseTeamMembers.handleChange}\n        >\n          {formatMessage(messages.includeCourseTeamMembers)}\n        </Form.Checkbox>\n      </Collapsible>\n    </>\n  );\n};\nGradebookFilters.propTypes = {\n  updateQueryParams: PropTypes.func.isRequired,\n};\n\nexport default GradebookFilters;\n","import { actions, selectors, thunkActions } from 'data/redux/hooks';\n\nexport const useGradebookFiltersData = ({ updateQueryParams }) => {\n  const includeCourseRoleMembers = selectors.filters.useIncludeCourseRoleMembers();\n  const updateIncludeCourseRoleMembers = actions.filters.useUpdateIncludeCourseRoleMembers();\n  const closeMenu = thunkActions.app.filterMenu.useCloseMenu();\n  const fetchGrades = thunkActions.grades.useFetchGrades();\n\n  const handleIncludeTeamMembersChange = ({ target: { checked } }) => {\n    updateIncludeCourseRoleMembers(checked);\n    fetchGrades();\n    updateQueryParams({ includeCourseRoleMembers: checked });\n  };\n  return {\n    closeMenu,\n    includeCourseTeamMembers: {\n      handleChange: handleIncludeTeamMembersChange,\n      value: includeCourseRoleMembers,\n    },\n  };\n};\n\nexport default useGradebookFiltersData;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'gradebook.BulkManagementHistoryView.heading',\n    defaultMessage: 'Bulk Management History',\n    description: 'Heading text for BulkManagement History Tab',\n  },\n  helpText: {\n    id: 'gradebook.BulkManagementHistoryView',\n    defaultMessage: 'Below is a log of previous grade imports.  To download a CSV of your gradebook and import grades for override, return to the Gradebook.  Please note, after importing grades, it may take a few seconds to process the override.',\n    description: 'Bulk Management History View help text',\n  },\n  successDialog: {\n    id: 'gradebook.BulkManagementHistoryView.successDialog',\n    defaultMessage: 'CSV processing. File uploads may take several minutes to complete.',\n    description: 'Success Dialog message in BulkManagement Tab File Upload Form',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { connect } from 'react-redux';\n\nimport { Alert } from '@edx/paragon';\n\nimport selectors from 'data/selectors';\nimport messages from './messages';\n\n/**\n * <BulkManagementAlerts />\n * Alerts to display at the top of the BulkManagement tab\n */\nexport const BulkManagementAlerts = ({\n  bulkImportError,\n  uploadSuccess,\n}) => (\n  <>\n    <Alert\n      variant=\"danger\"\n      show={!!bulkImportError}\n      dismissible={false}\n    >\n      {bulkImportError}\n    </Alert>\n    <Alert\n      variant=\"success\"\n      show={uploadSuccess}\n      dismissible={false}\n    >\n      <FormattedMessage {...messages.successDialog} />\n    </Alert>\n  </>\n);\n\nBulkManagementAlerts.defaultProps = {\n  bulkImportError: '',\n  uploadSuccess: false,\n};\n\nBulkManagementAlerts.propTypes = {\n  // redux\n  bulkImportError: PropTypes.string,\n  uploadSuccess: PropTypes.bool,\n};\n\nexport const mapStateToProps = (state) => ({\n  bulkImportError: selectors.grades.bulkImportError(state),\n  uploadSuccess: selectors.grades.uploadSuccess(state),\n});\n\nexport default connect(mapStateToProps)(BulkManagementAlerts);\n","/* eslint-disable react/sort-comp, react/button-has-type */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Hyperlink, Icon } from '@edx/paragon';\nimport { Download } from '@edx/paragon/icons';\n\nimport lms from 'data/services/lms';\n\n/**\n * <ResultsSummary {...{ courseId, rowId, text }} />\n * displays a result summary cell for a single bulk management upgrade history entry.\n * @param {string} courseId - course identifier\n * @param {number} rowId - row/error identifier\n * @param {string} text - summary string\n */\nconst ResultsSummary = ({\n  rowId,\n  text,\n}) => (\n  <Hyperlink\n    href={lms.urls.bulkGradesUrlByRow(rowId)}\n    destination=\"www.edx.org\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    showLaunchIcon={false}\n  >\n    <Icon src={Download} className=\"d-inline-block\" />\n    {text}\n  </Hyperlink>\n);\n\nResultsSummary.propTypes = {\n  rowId: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default ResultsSummary;\n","/* eslint-disable react/button-has-type, import/no-named-as-default */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { DataTable } from '@edx/paragon';\n\nimport { bulkManagementColumns } from 'data/constants/app';\nimport selectors from 'data/selectors';\n\nimport ResultsSummary from './ResultsSummary';\n\nexport const mapHistoryRows = ({\n  resultsSummary,\n  originalFilename,\n  user,\n  ...rest\n}) => ({\n  resultsSummary: (<ResultsSummary {...resultsSummary} />),\n  filename: (<span className=\"wrap-text-in-cell\">{originalFilename}</span>),\n  user: (<span className=\"wrap-text-in-cell\">{user}</span>),\n  ...rest,\n});\n\n/**\n * <HistoryTable />\n * Table with history of bulk management uploads, including a results summary which\n * displays total, skipped, and failed uploads\n */\nexport const HistoryTable = ({\n  bulkManagementHistory,\n}) => (\n  <DataTable\n    data={bulkManagementHistory.map(mapHistoryRows)}\n    hasFixedColumnWidths\n    columns={bulkManagementColumns}\n    className=\"table-striped\"\n    itemCount={bulkManagementHistory.length}\n  />\n);\nHistoryTable.defaultProps = {\n  bulkManagementHistory: [],\n};\nHistoryTable.propTypes = {\n  // redux\n  bulkManagementHistory: PropTypes.arrayOf(PropTypes.shape({\n    originalFilename: PropTypes.string.isRequired,\n    user: PropTypes.string.isRequired,\n    timeUploaded: PropTypes.string.isRequired,\n    resultsSummary: PropTypes.shape({\n      rowId: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n    }),\n  })),\n};\n\nexport const mapStateToProps = (state) => ({\n  bulkManagementHistory: selectors.grades.bulkManagementHistoryEntries(state),\n});\n\nexport default connect(mapStateToProps)(HistoryTable);\n","/* eslint-disable react/button-has-type, import/no-named-as-default */\nimport React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\nimport BulkManagementAlerts from './BulkManagementAlerts';\nimport HistoryTable from './HistoryTable';\n\n/**\n * <BulkManagementHistoryView />\n * top-level view for managing uploads of bulk management override csvs.\n */\nexport const BulkManagementHistoryView = () => (\n  <div className=\"bulk-management-history-view\">\n    <h4><FormattedMessage {...messages.heading} /></h4>\n    <p className=\"help-text\">\n      <FormattedMessage {...messages.helpText} />\n    </p>\n    <BulkManagementAlerts />\n    <HistoryTable />\n  </div>\n);\n\nexport default BulkManagementHistoryView;\n","/* eslint-disable import/no-named-as-default */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\n\nimport selectors from 'data/selectors';\nimport thunkActions from 'data/thunkActions';\nimport { views } from 'data/constants/app';\n\nimport WithSidebar from 'components/WithSidebar';\nimport GradebookHeader from 'components/GradebookHeader';\nimport GradesView from 'components/GradesView';\nimport GradebookFilters from 'components/GradebookFilters';\nimport BulkManagementHistoryView from 'components/BulkManagementHistoryView';\n\n/**\n * <GradebookPage />\n * Top-level view for the Gradebook MFE.\n * Organizes a header and a pair of views (Grades and BulkManagement) with a toggle-able\n * filter sidebar.\n */\nexport class GradebookPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateQueryParams = this.updateQueryParams.bind(this);\n  }\n\n  componentDidMount() {\n    const urlQuery = queryString.parse(this.props.location.search);\n    this.props.initializeApp(this.props.match.params.courseId, urlQuery);\n  }\n\n  updateQueryParams(queryParams) {\n    const parsed = queryString.parse(this.props.location.search);\n    Object.keys(queryParams).forEach((key) => {\n      if (queryParams[key]) {\n        parsed[key] = queryParams[key];\n      } else {\n        delete parsed[key];\n      }\n    });\n    this.props.history.push(`?${queryString.stringify(parsed)}`);\n  }\n\n  render() {\n    return (\n      <WithSidebar\n        sidebar={<GradebookFilters updateQueryParams={this.updateQueryParams} />}\n      >\n        <div className=\"px-3 gradebook-content\">\n          <GradebookHeader />\n          {(this.props.activeView === views.bulkManagementHistory\n            ? <BulkManagementHistoryView />\n            : <GradesView updateQueryParams={this.updateQueryParams} />\n          )}\n        </div>\n      </WithSidebar>\n    );\n  }\n}\nGradebookPage.defaultProps = {\n  location: { search: '' },\n};\nGradebookPage.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  location: PropTypes.shape({ search: PropTypes.string }),\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      courseId: PropTypes.string,\n    }),\n  }).isRequired,\n  // redux\n  activeView: PropTypes.string.isRequired,\n  initializeApp: PropTypes.func.isRequired,\n};\n\nexport const mapStateToProps = (state) => ({\n  activeView: selectors.app.activeView(state),\n});\n\nexport const mapDispatchToProps = {\n  initializeApp: thunkActions.app.initialize,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GradebookPage);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'gradebook.page.title': {\n    id: 'gradebook.page.title',\n    defaultMessage: 'Gradebook | {siteName}',\n    description: 'Title tag',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport messages from './messages';\n\nconst Head = () => {\n  const { formatMessage } = useIntl();\n  return (\n    <Helmet>\n      <title>\n        {formatMessage(messages['gradebook.page.title'], { siteName: getConfig().SITE_NAME })}\n      </title>\n      <link rel=\"shortcut icon\" href={getConfig().FAVICON_URL} type=\"image/x-icon\" />\n    </Helmet>\n  );\n};\n\nHead.propTypes = {\n};\n\nexport default Head;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { AppProvider } from '@edx/frontend-platform/react';\n\nimport Footer from '@edx/frontend-component-footer';\nimport Header from '@edx/frontend-component-header';\n\nimport { routePath } from 'data/constants/app';\nimport store from 'data/store';\nimport GradebookPage from 'containers/GradebookPage';\nimport './App.scss';\nimport Head from './head/Head';\n\nconst App = () => (\n  <AppProvider store={store}>\n    <Head />\n    <Router>\n      <div>\n        <Header />\n        <main>\n          <Switch>\n            <Route\n              exact\n              path={routePath}\n              component={GradebookPage}\n            />\n          </Switch>\n        </main>\n        <Footer logo={process.env.LOGO_POWERED_BY_OPEN_EDX_URL_SVG} />\n      </div>\n    </Router>\n  </AppProvider>\n);\n\nexport default App;\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  APP_READY,\n  initialize,\n  mergeConfig,\n  subscribe,\n} from '@edx/frontend-platform';\n\nimport lightning from './lightning';\n\nimport messages from './i18n';\nimport App from './App';\n\nsubscribe(APP_READY, () => {\n  lightning();\n  ReactDOM.render(<App />, document.getElementById('root'));\n});\n\ninitialize({\n  handlers: {\n    config: () => {\n      mergeConfig({\n        BASE_URL: process.env.BASE_URL,\n        LMS_BASE_URL: process.env.LMS_BASE_URL,\n        LOGIN_URL: process.env.LOGIN_URL,\n        LOGOUT_URL: process.env.LOGOUT_URL,\n        CSRF_TOKEN_API_PATH: process.env.CSRF_TOKEN_API_PATH,\n        REFRESH_ACCESS_TOKEN_ENDPOINT: process.env.REFRESH_ACCESS_TOKEN_ENDPOINT,\n        DATA_API_BASE_URL: process.env.DATA_API_BASE_URL,\n        SECURE_COOKIES: process.env.NODE_ENV !== 'development',\n        SEGMENT_KEY: process.env.SEGMENT_KEY,\n        ACCESS_TOKEN_COOKIE_NAME: process.env.ACCESS_TOKEN_COOKIE_NAME,\n      });\n    },\n  },\n  messages,\n  requireAuthenticatedUser: true,\n});\n"],"names":["module","exports","window","lightningjs","n","t","e","r","i","a","o","d","c","test","document","location","protocol","arguments","this","id","s","apply","push","then","fh","eh","ph","_","P","w","l","replace","p","Date","addEventListener","attachEvent","join","setTimeout","createElement","h","appendChild","u","style","display","insertBefore","firstChild","frameBorder","navigator","userAgent","src","allowTransparency","contentWindow","open","domain","write","close","String","fromCharCode","lv","require","modules","usabilla_live","appMessages","ar","arMessages","es419Messages","faIRMessages","fr","frMessages","pt","ptMessages","it","itMessages","de","deMessages","hi","hiMessages","frCAMessages","ru","ruMessages","uk","ukMessages","paragonMessages","footerMessages","headerMessages","strictGet","target","name","Symbol","toStringTag","console","log","toString","error","Error","stack","dict","Proxy","get","options","year","month","day","timeZone","timeOptions","hour","minute","timeZoneName","routePath","getConfig","PUBLIC_PATH","views","StrictDict","grades","bulkManagementHistory","modalFieldKeys","adjustedGradePossible","adjustedGradeValue","assignmentName","reasonForChange","todaysDate","updateModuleId","updateUserId","updateUserName","localFilterKeys","assignmentGradeMax","assignmentGradeMin","courseGradeMax","courseGradeMin","bulkManagementColumns","accessor","Header","columnSortable","width","gradeOverrideHistoryColumns","adjustedGrade","date","grader","reason","formatDateForDisplay","inputDate","toLocaleDateString","toLocaleTimeString","sortAlphaAsc","gradeRowA","gradeRowB","username","toUpperCase","b","createActionFactory","dataKey","actionKey","_len","length","args","Array","_key","createAction","closeModal","setCourseId","filterMenu","endTransition","startTransition","toggle","setModalStateFromTable","setSearchValue","filterReducer","payload","obj","key","undefined","_objectSpread","setLocalFilter","filterObject","Object","keys","reduce","setModalState","modalState","setShowImportSuccessToast","setView","fetching","started","received","gotGradesFrozen","gotBulkManagementConfig","defineMessages","assignment","defaultMessage","description","assignmentGrade","assignmentType","cohort","courseGrade","includeCourseRoleMembers","track","filters","excludedCourseRoles","initialFilters","filterConfig","displayName","messages","connectedFilters","filterOrder","hideValue","badgeOrder","initialize","_ref","Boolean","reset","update","assignmentLimits","courseGradeLimits","banner","bulkHistory","csvUpload","finished","doneViewingAssignment","downloadReport","bulkGrades","intervention","data","headings","prev","next","courseId","totalUsersCount","filteredUsersCount","overrideHistory","currentEarnedAllOverride","currentPossibleAllOverride","currentEarnedGradedOverride","currentPossibleGradedOverride","originalGradeEarnedAll","originalGradePossibleAll","originalGradeEarnedGraded","originalGradePossibleGraded","toggleGradeFormat","request","success","failure","uploadOverride","app","assignmentTypes","cohorts","config","roles","tracks","paramKeys","cohortId","pageSize","userContains","enrollmentMode","getAuthenticatedHttpClient","post","stringifyUrl","url","query","queryString","skipNull","skipEmptyString","filterQuery","values","filter","pathname","split","pop","getUrlPrefix","LMS_BASE_URL","getBulkGradesUrl","getEnrollmentUrl","getGradesUrl","getGradebookUrl","getBulkUpdateUrl","getInterventionUrl","gradeCsvUrl","sectionOverrideHistoryUrl","subsectionId","userId","user_id","history_record_limit","instructorDashboardUrl","getCohortsUrl","getTracksUrl","getBulkHistoryUrl","getAssignmentTypesUrl","graded_only","getRolesUrl","bulkGradesUrlByRow","rowId","error_id","interventionExportCsvUrl","errors","missingAssignment","unhandledResponse","utils","fetch","urls","gradebookData","searchText","queryParams","gradeBulkOperationHistory","response","catch","Promise","reject","gradeOverrideHistory","updateGradebookData","updateData","uploadGradeCsv","formData","result","status","error_messages","api","simpleSelectorFactory","transformer","isArray","state","root","GradeFormats","absolute","percent","Headings","email","totalGrade","fullName","getLocalizedSlash","isRtl","getLocale","getRowsProcessed","processed_rows","processed","saved_rows","saved","total_rows","total","failed","skipped","summaryEntries","minGrade","maxGrade","transformHistoryEntry","_ref2","modified","original_filename","originalFilename","unique_id","rest","_objectWithoutProperties","_excluded","timeUploaded","resultsSummary","text","roundGrade","val","parseFloat","toFixed","subsectionGrade","subsection","earned","score_earned","possible","score_possible","attempted","simpleSelectors","_ref10","bulkImportError","_ref4","bulkManagement","errorMessages","formatGradeOverrideForDisplay","historyArray","map","item","history_date","history_user","override_reason","earned_graded_override","formatMinAssignmentGrade","percentGrade","assignmentId","formatMaxAssignmentGrade","formatMaxCourseGrade","formatMinCourseGrade","hasOverrideErrors","_ref8","gradeOverrideHistoryError","headingMapper","category","label","all","section","byCategory","byLabel","filteredLabels","entry","gradeData","_ref11","gradeFormat","showSpinner","gradeOverrideCurrentEarnedGradedOverride","gradeOverrideHistoryResults","gradeOriginalEarnedGraded","gradeOriginalPossibleGraded","nextPage","prevPage","showSuccess","allGrades","_ref3","results","bulkManagementHistoryEntries","_ref5","history","getExampleSectionBreakdown","_ref6","section_breakdown","gradeOverrides","_ref7","uploadSuccess","_ref9","courseGradeFilterValidity","isFilterValid","value","intValue","parseInt","isMaxValid","isMinValid","isFilterMenuClosed","transitioning","isFilterMenuOpening","modalSelectors","filterMenuSelectors","areCourseGradeFiltersValid","validity","assignmentGradeLimits","editUpdateData","grade","comment","usage_id","modalData","isClosed","isOpening","areGradesFrozen","allAssignmentTypes","allCohorts","getCohortById","selectedCohortId","find","cohortsByName","getCohortNameById","chooseRelevantAssignmentData","subsection_name","subsectionLabel","type","module_id","getAssignmentsFromResultsSubstate","allFilters","selectableAssignments","selectedAssignmentType","needToFilter","allAssignments","isDefault","relevantAssignmentDataFromResults","selectedAssignmentId","selectedAssignmentLabel","selectableAssignmentLabels","areAssignmentGradeFiltersSet","canUserViewGradebook","hasMastersTrack","some","slug","allTracks","stateHasMastersTrack","tracksByName","filterNames","filterConstants","filterBadgeValues","lmsApiServiceArgs","selectedCohortEntry","selectedTrackEntry","editModalPossibleGrade","filterBadgeConfig","filterValue","_filterConfig$name","isRange","getHeadings","gradeExportUrl","lms","interventionExportUrl","localFilters","hasAssignment","shouldShowSpinner","showBulkManagement","bulkManagementAvailable","initialState","activeView","showImportSuccessToast","searchValue","startedFetching","errorFetching","gradeOverrideCurrentEarnedAllOverride","gradeOverrideCurrentPossibleAllOverride","gradeOverrideCurrentPossibleGradedOverride","gradeOriginalEarnedAll","gradeOriginalPossibleAll","finishedFetching","overrideHistoryError","isImportGradesActive","isDownloadInterventionsActive","isDownloadGradesActive","combineReducers","actions","userEntry","filterActions","filterName","gradesActions","action","actionType","forEach","newState","gradeActions","selectors","relevantAssignment","_state$bulkManagement","_excluded2","finishedFetchingOverrideHistory","filterType","slice","events","receivedRoles","receivedGrades","updateSucceeded","updateFailed","uploadOverrideSucceeded","uploadOverrideFailed","filterApplied","gradesReportDownloaded","interventionReportDownloaded","eventNames","triggers","trackingCategory","eventsMap","loadTrigger","event","trackEvent","propsFn","extrasFn","properties","handleEvent","trackPageView","page","responseData","updatedGrades","createStore","loggerMiddleware","createLogger","middleware","thunkMiddleware","SEGMENT_KEY","createMiddleware","Segment","redux","reducers","composeWithDevTools","fetchBulkUpgradeHistory","dispatch","fetchGrades","overrides","getState","fetchOptions","sort","previous","total_users_count","filtered_users_count","fetchGradeOverrideHistory","override","earned_all_override","possible_all_override","possible_graded_override","original_grade","earned_all","possible_all","earned_graded","possible_graded","error_message","fetchGradesIfAssignmentGradeFiltersSet","fetchPrevNextGrades","endpoint","submitImportGradesButtonData","updateGrades","fetchCohorts","fetchTracks","course_modes","fetchAssignmentTypes","assignment_types","grades_frozen","can_see_bulk_management","allowedRoles","fetchRoles","is_staff","role","course_id","includes","handleTransitionEnd","currentTarget","toggleMenu","requestAnimationFrame","animationCb","urlQuery","WithSidebar","React","sidebarClassNames","classNames","props","contentClassNames","opening","render","_jsxs","className","children","_jsx","onTransitionEnd","handleSlideDone","sidebar","propTypes","PropTypes","mapDispatchToProps","thunkActions","connect","selectorHook","selector","useSelector","useEditModalPossibleGrade","useGetHeadings","useGradeExportUrl","useInterventionExportUrl","useSelectedCohortEntry","useSelectedTrackEntry","useShouldShowSpinner","useShowBulkManagement","useFilterBadgeConfig","useActiveView","useAssignmentGradeLimits","useAreCourseGradeFiltersValid","useCourseGradeLimits","useCourseGradeFilterValidity","useCourseId","useModalData","useSearchValue","useShowImportSuccessToast","useAllAssignmentTypes","useAreGradesFrozen","useAllCohorts","useCohortsByName","useData","useIncludeCourseRoleMembers","useSelectableAssignmentLabels","useSelectedAssignmentLabel","useAssignmentType","useAllGrades","useUserCounts","useGradeData","useHasOverrideErrors","useShowSuccess","useSubsectionGrade","useCanUserViewGradebook","useAllTracks","useTracksByName","actionHook","store","useSetLocalFilter","useSetSearchValue","useSetShowImportSuccessToast","useSetView","useCloseModal","useSetModalState","useUpdateAssignment","useUpdateAssignmentLimits","useUpdateAssignmentType","useUpdateCohort","useUpdateCourseGradeLimits","useUpdateIncludeCourseRoleMembers","useUpdateTrack","useResetFilters","useDoneViewingAssignment","useDownloadBulkGradesReport","useDownloadInterventionReport","useToggleGradeFormat","useCloseBanner","useCloseMenu","useHandleTransitionEnd","useToggleMenu","useSetModalStateFromTable","useFetchGradesIfAssignmentGradeFiltersSet","useFetchPrevNextGrades","useFetchGrades","useSubmitImportGradesButtonData","useUpdateGrades","selectorHooks","actionHooks","thunkActionHooks","backToDashboard","gradebook","frozenWarning","unauthorizedWarning","toActivityLog","toGradesView","GradebookHeader","formatMessage","useIntl","handleToggleViewClick","toggleViewMessage","useGradebookHeaderData","dashboardUrl","href","Button","variant","onClick","buttonStates","pending","default","NetworkButton","labels","FormattedMessage","icons","iconClass","defaultIcon","import","Icon","buttonState","StatefulButton","disabledStates","defaultProps","isRequired","csvUploadLabel","importGradesBtnText","ImportGradesButton","fileInputRef","handleClickImportGrades","handleFileInputChange","useImportButtonData","useRef","current","click","files","clearInput","FormData","append","useImportGradesButtonData","_Fragment","Form","method","controlId","onChange","ref","downloadGradesBtn","BulkManagementControls","show","handleClickExportGrades","useBulkManagementControlsData","downloadBulkGradesReport","assign","ReasonInput","useReasonInputData","focus","AdjustedGradeInput","hintText","useAdjustedGradeInputData","possibleGrade","adjustedGradeHeader","dateHeader","graderHeader","reasonHeader","OverrideTable","hide","columns","useOverrideTableData","tableProps","DataTable","itemCount","assignmentHeader","currentGradeHeader","originalGradeHeader","studentHeader","title","closeText","visibility","saveVisibility","saveGrade","HistoryHeader","HistoryKeys","student","originalGrade","currentGrade","ModalHeaders","EditModal","onClose","handleAdjustedGradeClick","isOpen","useEditModalData","ModalDialog","size","hasCloseButton","isFullscreenOnMobile","Alert","dismissible","ActionRow","FilterBadge","handleClose","FilterBadges","visibilityLabel","BoldText","FilteredUsersLabel","filteredUsers","totalUsers","editFilters","FilterMenuToggle","toggleFilterMenu","FilterAlt","fullNameHeading","emailHeading","totalGradeHeading","usernameHeading","studentKeyLabel","usernameLabel","totalGradePercentage","noResultsFound","Username","userKey","Text","mastersOnlyFieldAsterisk","TotalGradeLabelReplacement","OverlayTrigger","trigger","placement","overlay","Tooltip","screenReaderText","UsernameLabelReplacement","MastersOnlyLabelReplacement","message","GradeButton","transforms","GradebookTable","nullMethod","emptyContent","useGradebookTableData","heading","LabelReplacements","Fields","external_user_key","Email","acc","rowHeaderColumnKey","hasFixedColumnWidths","RowStatusComponent","content","showHistoryViewBtn","ImportSuccessToast","useImportSuccessToastData","setAppView","setShow","handleShowHistoryView","Toast","downloadBtn","InterventionsReport","handleClick","useInterventionsReportData","downloadInterventionReport","PageButtons","usePageButtonsData","getPrevNextGrades","disabled","getPrevGrades","getNextGrades","paddingBottom","margin","scoreView","ScoreViewInput","toggleFormat","as","hint","SearchControls","onSubmit","onBlur","onClear","inputLabel","useSearchControlsData","newValue","SearchField","SpinnerIcon","editSuccessAlert","maxGradeInvalid","minGradeInvalid","StatusAlerts","successBanner","gradeFilter","useStatusAlertsData","limitValidity","showSuccessBanner","handleCloseSuccessBanner","isCourseGradeFilterAlertOpen","validityMessages","filterStepHeading","gradebookStepHeading","mastersHint","GradesView","updateQueryParams","stepHeadings","handleFilterBadgeClose","resetFilters","useGradesViewData","assignments","overallGrade","studentGroups","includeCourseTeamMembers","cohortAll","trackAll","closeFilters","SelectGroup","AssignmentTypeFilter","handleChange","isDisabled","assignmentFilterOptions","filterAssignmentType","useAssignmentTypeFilterData","AssignmentFilter","updateAssignmentFilter","conditionalFetch","selectedFilterOption","useAssignmentFilterData","filterOptions","PercentGroup","min","max","step","AssignmentGradeFilter","selectedAssignment","handleSetMax","handleSetMin","handleSubmit","localAssignmentLimits","setFilter","updateAssignmentLimits","useAssignmentGradeFilterData","CourseGradeFilter","handleApplyClick","localCourseLimits","updateFilter","useCourseGradeFilterData","mapOptions","StudentGroupsFilter","updateCohort","updateTrack","selectedCohortItem","entries","selectedTrackItem","useStudentGroupsFilterData","GradebookFilters","closeMenu","updateIncludeCourseRoleMembers","checked","useGradebookFiltersData","collapsibleClassName","IconButton","iconAs","Close","alt","Collapsible","defaultOpen","helpText","successDialog","BulkManagementAlerts","ResultsSummary","Hyperlink","destination","rel","showLaunchIcon","Download","mapHistoryRows","user","filename","HistoryTable","BulkManagementHistoryView","GradebookPage","constructor","super","bind","componentDidMount","search","initializeApp","match","params","parsed","Head","Helmet","siteName","SITE_NAME","FAVICON_URL","App","AppProvider","Router","Switch","Route","exact","path","component","Footer","logo","process","LOGO_POWERED_BY_OPEN_EDX_URL_SVG","subscribe","APP_READY","lightning","ReactDOM","getElementById","handlers","mergeConfig","BASE_URL","LOGIN_URL","LOGOUT_URL","CSRF_TOKEN_API_PATH","REFRESH_ACCESS_TOKEN_ENDPOINT","DATA_API_BASE_URL","SECURE_COOKIES","ACCESS_TOKEN_COOKIE_NAME","requireAuthenticatedUser"],"sourceRoot":""}